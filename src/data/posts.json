{
    "status": "ok",
    "feed": {
        "url": "https://medium.com/feed/@andrewmasonmedia/",
        "title": "Stories by masonmedia on Medium",
        "link": "https://medium.com/@andrewmasonmedia?source=rss-8e078f245449------2",
        "author": "",
        "description": "Stories by masonmedia on Medium",
        "image": "https://cdn-images-1.medium.com/fit/c/150/150/1*ZA4Pj4gNIYqNEGH1NGLa4A.jpeg"
    },
    "items": [
        {
            "id": "1",
            "title": "How to limit the length of text (strings) in javascript and Vuejs",
            "pubDate": "2023-03-27 15:40:19",
            "link": "https://medium.com/@andrewmasonmedia/how-to-limit-the-length-of-text-strings-in-javascript-and-vuejs-17a50af071a7?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/17a50af071a7",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*s8ew3q2j4wSTEji2",
            "description": "\n<p>In building a travel website project recently I needed to limit the length of a string as part of an API GET request. I was using the Wikipedia API to return just the text content of a page (as JSON), without all the images, links, etc (which in itself is a maddening rabbit hole of googling). I wanted to show just a short snippet of text so each page would have a little intro but not the entire payload of the Wiki page. This is what I\u00a0found.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*s8ew3q2j4wSTEji2\"><figcaption>Photo by <a href=\"https://unsplash.com/@markusspiske?utm_source=medium&amp;utm_medium=referral\">Markus Spiske</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Intro</h4>\n<p>One of the first points to mention is how tricky it was to word/phrase this question when I was googling. I wanted to limit or reduce the length (or amount) of text that was coming back from an API response. But in just one key:value in the JSON. Like I wanted 3 paragraphs instead of 3 pages worth of text content. But text in javascript is a <em>string</em>. And if you want to shorten a string, you can\u2019t say\u00a0.reduce() or\u00a0.trim(), as these are JS methods that do something else.</p>\n<p>So the best responses I found were from searching:</p>\n<p>How to truncate a string in Javascript<br>Shorten a string without cutting words<br>How to limit the length of string in Javascript</p>\n<h4>Basics</h4>\n<p>The basics of reducing the length of a string aren\u2019t too tricky. There are two javascript methods that do it short and\u00a0quick:</p>\n<p>.slice() and\u00a0.substr()</p>\n<ol><li>.slice() literally slices a string (or an array, etc) between two points (i.e. a start and end). The two points are indexes passed as parameters which return a result with the extraneous values removed\u00a0i.e.</li></ol>\n<pre>// slice method<br>.slice(index 1, index 2)<br><br>let string = 'This is a string of text.';<br><br>let result = string.slice(0, 3);<br><br>console.log(result);<br><br>//result<br>This</pre>\n<blockquote>More on\u00a0.slice()\u00a0<a href=\"https://www.w3schools.com/jsref/jsref_slice_string.asp\">here</a>.</blockquote>\n<p>2.\u00a0.substr()performs a similar action, cutting a string between a range\u200a\u2014\u200abut with substr() the parameters are characters, not indexes. Similar to\u00a0.slice() the two points are indexes passed as parameters which return a result with the extraneous values removed\u00a0i.e.</p>\n<pre>let string = 'This is a string of text.';<br><br>let result = string.substr(0, 4);<br><br>console.log(result);<br><br>//result<br>This</pre>\n<blockquote>More on substring() <a href=\"https://www.w3schools.com/jsref/jsref_substr.asp\">here</a>.</blockquote>\n<h4>Fetching Data from an API and rendering a truncated response string (or <em>Shortening a sentence, without cutting\u00a0words</em>).</h4>\n<p>Now, back to the goal, I want a shorter text response from my API request, and I want to add an ellipsis at the end so it didn\u2019t look\u00a0weird.</p>\n<pre>&lt;script setup&gt;<br>import { onMounted, ref } from 'vue'<br><br>const stringData = ref([]);<br><br>function getData() {<br>  fetch('https://yourapidata.com')<br>    .then((response) =&gt; response.json())<br>    .then((data) =&gt; {<br>     //set data gotten from API call to our empty stringData variable<br>      stringData.value = data;<br>      console.log(stringData.value)<br>    });<br>}<br><br>onMounted(() =&gt; {<br>  getData();<br>})<br><br>// result<br>// Let's say for argument the stringData result is 'This is a string.'<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>// We can apply the methods above in a couple ways<br><br>  &lt;div v-for=\"(string, index) in stringData\" :key=\"index\"&gt;<br><br>    &lt;p&gt;{{ string.slice(0, 4) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>    &lt;p&gt;{{ string.substr(0, 5) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>  &lt;/div&gt;<br>&lt;?template&gt;</pre>\n<pre>&lt;script setup&gt;<br>import { onMounted, ref } from 'vue'<br><br>const stringData = ref([]);<br><br>function getData() {<br>  fetch('https://yourapidata.com')<br>    .then((response) =&gt; response.json())<br>    .then((data) =&gt; {<br>     //set data gotten from API call to our empty stringData variable<br>      stringData.value = data;<br>      console.log(stringData.value)<br>    });<br>}<br><br>onMounted(() =&gt; {<br>  getData();<br>})<br><br>// result<br>// Let's say for argument the stringData result is 'This is a string.'<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>// We can apply the methods above in a couple ways<br><br>  &lt;div v-for=\"(string, index) in stringData\" :key=\"index\"&gt;<br><br>    &lt;p&gt;{{ string.slice(0, 4) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>    &lt;p&gt;{{ string.substr(0, 5) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>  &lt;/div&gt;<br>&lt;?template&gt;</pre>\n<p>We can also use a great function (from link below) with parameters that can not only truncate the length of the string, but also make sure it doesn\u2019t cut off any words, plus add an ellipsis at the\u00a0end:</p>\n<pre>&lt;script setup&gt;<br>import { onMounted, ref } from 'vue'<br><br>const stringData = ref([]);<br><br>function getData() {<br>  fetch('https://yourapidata.com')<br>    .then((response) =&gt; response.json())<br>    .then((data) =&gt; {<br>     //set data gotten from API call to our empty stringData variable<br>      stringData.value = data;<br>      console.log(stringData.value)<br>    });<br>}<br><br>onMounted(() =&gt; {<br>  getData();<br>})<br><br>// result<br>// 'This is a string.'<br><br>// function to shorten the returned string: <br>// text = your returned string<br>// max = number of characters<br>// From this StackOverflow post https://stackoverflow.com/questions/5454235/shorten-string-without-cutting-words-in-javascript<br><br>function shorten(text, max) {<br>    return text &amp;&amp; text.length &gt; max ? text.slice(0, max).split(' ').slice(0, -1).join(' ') : text<br>}<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br><br>  //loop over the response array<br>  &lt;div v-for=\"(string, index) in stringData\" :key=\"index\"&gt;<br><br>    &lt;p&gt;{{ shorten(string.text, 5) }}&lt;/p&gt;<br>    // renders 'This'<br><br>    // With ellipsis<br>    &lt;p&gt;{{ shorten(string.text, 5) + '...' }}&lt;/p&gt;<br>    // renders 'This...'<br><br>  &lt;/div&gt;<br>&lt;?template&gt;</pre>\n<h4>Conclusion</h4>\n<p>For me this last one did the trick. I need to limit the length of string, but not lose parts of a word in a sentence, and add an ellipsis at the end to show there is more text to be found on the original Wikipedia site. There are more great approaches to this on the original Stack Overflow response\u00a0<a href=\"https://stackoverflow.com/questions/5454235/shorten-string-without-cutting-words-in-javascript\"><strong>here</strong></a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=17a50af071a7\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>In building a travel website project recently I needed to limit the length of a string as part of an API GET request. I was using the Wikipedia API to return just the text content of a page (as JSON), without all the images, links, etc (which in itself is a maddening rabbit hole of googling). I wanted to show just a short snippet of text so each page would have a little intro but not the entire payload of the Wiki page. This is what I\u00a0found.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*s8ew3q2j4wSTEji2\"><figcaption>Photo by <a href=\"https://unsplash.com/@markusspiske?utm_source=medium&amp;utm_medium=referral\">Markus Spiske</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Intro</h4>\n<p>One of the first points to mention is how tricky it was to word/phrase this question when I was googling. I wanted to limit or reduce the length (or amount) of text that was coming back from an API response. But in just one key:value in the JSON. Like I wanted 3 paragraphs instead of 3 pages worth of text content. But text in javascript is a <em>string</em>. And if you want to shorten a string, you can\u2019t say\u00a0.reduce() or\u00a0.trim(), as these are JS methods that do something else.</p>\n<p>So the best responses I found were from searching:</p>\n<p>How to truncate a string in Javascript<br>Shorten a string without cutting words<br>How to limit the length of string in Javascript</p>\n<h4>Basics</h4>\n<p>The basics of reducing the length of a string aren\u2019t too tricky. There are two javascript methods that do it short and\u00a0quick:</p>\n<p>.slice() and\u00a0.substr()</p>\n<ol><li>.slice() literally slices a string (or an array, etc) between two points (i.e. a start and end). The two points are indexes passed as parameters which return a result with the extraneous values removed\u00a0i.e.</li></ol>\n<pre>// slice method<br>.slice(index 1, index 2)<br><br>let string = 'This is a string of text.';<br><br>let result = string.slice(0, 3);<br><br>console.log(result);<br><br>//result<br>This</pre>\n<blockquote>More on\u00a0.slice()\u00a0<a href=\"https://www.w3schools.com/jsref/jsref_slice_string.asp\">here</a>.</blockquote>\n<p>2.\u00a0.substr()performs a similar action, cutting a string between a range\u200a\u2014\u200abut with substr() the parameters are characters, not indexes. Similar to\u00a0.slice() the two points are indexes passed as parameters which return a result with the extraneous values removed\u00a0i.e.</p>\n<pre>let string = 'This is a string of text.';<br><br>let result = string.substr(0, 4);<br><br>console.log(result);<br><br>//result<br>This</pre>\n<blockquote>More on substring() <a href=\"https://www.w3schools.com/jsref/jsref_substr.asp\">here</a>.</blockquote>\n<h4>Fetching Data from an API and rendering a truncated response string (or <em>Shortening a sentence, without cutting\u00a0words</em>).</h4>\n<p>Now, back to the goal, I want a shorter text response from my API request, and I want to add an ellipsis at the end so it didn\u2019t look\u00a0weird.</p>\n<pre>&lt;script setup&gt;<br>import { onMounted, ref } from 'vue'<br><br>const stringData = ref([]);<br><br>function getData() {<br>  fetch('https://yourapidata.com')<br>    .then((response) =&gt; response.json())<br>    .then((data) =&gt; {<br>     //set data gotten from API call to our empty stringData variable<br>      stringData.value = data;<br>      console.log(stringData.value)<br>    });<br>}<br><br>onMounted(() =&gt; {<br>  getData();<br>})<br><br>// result<br>// Let's say for argument the stringData result is 'This is a string.'<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>// We can apply the methods above in a couple ways<br><br>  &lt;div v-for=\"(string, index) in stringData\" :key=\"index\"&gt;<br><br>    &lt;p&gt;{{ string.slice(0, 4) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>    &lt;p&gt;{{ string.substr(0, 5) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>  &lt;/div&gt;<br>&lt;?template&gt;</pre>\n<pre>&lt;script setup&gt;<br>import { onMounted, ref } from 'vue'<br><br>const stringData = ref([]);<br><br>function getData() {<br>  fetch('https://yourapidata.com')<br>    .then((response) =&gt; response.json())<br>    .then((data) =&gt; {<br>     //set data gotten from API call to our empty stringData variable<br>      stringData.value = data;<br>      console.log(stringData.value)<br>    });<br>}<br><br>onMounted(() =&gt; {<br>  getData();<br>})<br><br>// result<br>// Let's say for argument the stringData result is 'This is a string.'<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br>// We can apply the methods above in a couple ways<br><br>  &lt;div v-for=\"(string, index) in stringData\" :key=\"index\"&gt;<br><br>    &lt;p&gt;{{ string.slice(0, 4) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>    &lt;p&gt;{{ string.substr(0, 5) + '...' }}&lt;/p&gt;<br>    // renders 'This'<br><br>  &lt;/div&gt;<br>&lt;?template&gt;</pre>\n<p>We can also use a great function (from link below) with parameters that can not only truncate the length of the string, but also make sure it doesn\u2019t cut off any words, plus add an ellipsis at the\u00a0end:</p>\n<pre>&lt;script setup&gt;<br>import { onMounted, ref } from 'vue'<br><br>const stringData = ref([]);<br><br>function getData() {<br>  fetch('https://yourapidata.com')<br>    .then((response) =&gt; response.json())<br>    .then((data) =&gt; {<br>     //set data gotten from API call to our empty stringData variable<br>      stringData.value = data;<br>      console.log(stringData.value)<br>    });<br>}<br><br>onMounted(() =&gt; {<br>  getData();<br>})<br><br>// result<br>// 'This is a string.'<br><br>// function to shorten the returned string: <br>// text = your returned string<br>// max = number of characters<br>// From this StackOverflow post https://stackoverflow.com/questions/5454235/shorten-string-without-cutting-words-in-javascript<br><br>function shorten(text, max) {<br>    return text &amp;&amp; text.length &gt; max ? text.slice(0, max).split(' ').slice(0, -1).join(' ') : text<br>}<br><br>&lt;/script&gt;<br><br>&lt;template&gt;<br><br>  //loop over the response array<br>  &lt;div v-for=\"(string, index) in stringData\" :key=\"index\"&gt;<br><br>    &lt;p&gt;{{ shorten(string.text, 5) }}&lt;/p&gt;<br>    // renders 'This'<br><br>    // With ellipsis<br>    &lt;p&gt;{{ shorten(string.text, 5) + '...' }}&lt;/p&gt;<br>    // renders 'This...'<br><br>  &lt;/div&gt;<br>&lt;?template&gt;</pre>\n<h4>Conclusion</h4>\n<p>For me this last one did the trick. I need to limit the length of string, but not lose parts of a word in a sentence, and add an ellipsis at the end to show there is more text to be found on the original Wikipedia site. There are more great approaches to this on the original Stack Overflow response\u00a0<a href=\"https://stackoverflow.com/questions/5454235/shorten-string-without-cutting-words-in-javascript\"><strong>here</strong></a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=17a50af071a7\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "javascript-tips",
                "vuejs",
                "api",
                "text",
                "string-methods"
            ]
        },
        {
            "id": "2",
            "title": "How to fix ENOENT, EACCESS and other errors when running npm install",
            "pubDate": "2023-03-08 01:30:50",
            "link": "https://medium.com/@andrewmasonmedia/how-to-fix-enoent-eaccess-and-other-errors-when-running-npm-install-45209113afe9?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/45209113afe9",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*ugMPSIsYNw6A61E4",
            "description": "\n<p>I was following one of my own <a href=\"https://medium.com/@andrewmasonmedia/set-up-a-vue-app-with-vite-sass-vue-router-and-other-goodies-30647b82c271\">tutorials</a> to set up a new Vue project with Vite but I kept getting errors when I ran npm install. I had no clue what was happening. I could install Vite, install Vue, make all my custom selections, and create the project folder. But things went haywire when I tried to install dependencies. Here\u2019s what worked to fix\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ugMPSIsYNw6A61E4\"><figcaption>Photo by <a href=\"https://unsplash.com/@visuals?utm_source=medium&amp;utm_medium=referral\">visuals</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Intro</h4>\n<p>I ran through all the same commands and steps I\u2019d outlined <a href=\"https://medium.com/@andrewmasonmedia/set-up-a-vue-app-with-vite-sass-vue-router-and-other-goodies-30647b82c271\"><strong>here</strong></a>. But every time I came to npm install my terminal went red. I could override using sudo but a) why should I have to do that, and b) when I did, I had to repeat it for every command thereafter, even trying to start a dev server with npm run\u00a0dev.</p>\n<p>It went like\u00a0this:</p>\n<p>I installed Vite and set up a new Vue project. That worked as expected until I\u00a0ran:</p>\n<pre>npm install</pre>\n<p>At which point I got these\u00a0errors:</p>\n<pre>npm ERR! code ENOENT<br>[...lots of other error logs...]<br>npm ERR! enoent This is related to npm not being able to find a file.</pre>\n<h4>Solutions</h4>\n<p>Then I\u00a0ran:</p>\n<pre>npm cache verify </pre>\n<p>After which I\u00a0got:</p>\n<pre><br>npm ERR! code EACCES <br>npm ERR! Your cache folder contains root-owned files, due to a <br>bug in previous versions of npm which has since been addressed. </pre>\n<p>Followed by what appeared to be a solution:</p>\n<pre> <br>npm ERR! To permanently fix this problem, please run:<br>sudo chown -R 501:20 \u201c/Users/yourusername/.npm\u201d </pre>\n<p>So I\u00a0ran:</p>\n<pre>sudo chown -R 501:20 \u201c/Users/myusername/.npm </pre>\n<p>Which solved the problem. No more npm ERR!, no more sudo, no more\u00a0red.</p>\n<p>Some other options to try if the above doesn\u2019t work for\u00a0you:</p>\n<pre># update npm to the latest version<br>npm install -g npm@latest<br><br># clean/clear npm cache<br>npm cache clean --force<br><br># delete node modules and package-lock.json <br>npm rm -rf node_modules &amp;&amp; rm package-lock.json<br><br># rerun npm install for dependencies<br>npm install </pre>\n<p>Check out <a href=\"https://sebhastian.com/npm-err-enoent/\">this article</a> for\u00a0more.</p>\n<h4>Conclusion</h4>\n<p>There\u2019s nothing worse than errors even before you start coding. Hopefully this helps get you out of the frustrating error zone and back into a creative space. Let me know if this works for you and feel free to comment if it doesn\u2019t, or you come across better options.\u00a0Thanks!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=45209113afe9\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>I was following one of my own <a href=\"https://medium.com/@andrewmasonmedia/set-up-a-vue-app-with-vite-sass-vue-router-and-other-goodies-30647b82c271\">tutorials</a> to set up a new Vue project with Vite but I kept getting errors when I ran npm install. I had no clue what was happening. I could install Vite, install Vue, make all my custom selections, and create the project folder. But things went haywire when I tried to install dependencies. Here\u2019s what worked to fix\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*ugMPSIsYNw6A61E4\"><figcaption>Photo by <a href=\"https://unsplash.com/@visuals?utm_source=medium&amp;utm_medium=referral\">visuals</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Intro</h4>\n<p>I ran through all the same commands and steps I\u2019d outlined <a href=\"https://medium.com/@andrewmasonmedia/set-up-a-vue-app-with-vite-sass-vue-router-and-other-goodies-30647b82c271\"><strong>here</strong></a>. But every time I came to npm install my terminal went red. I could override using sudo but a) why should I have to do that, and b) when I did, I had to repeat it for every command thereafter, even trying to start a dev server with npm run\u00a0dev.</p>\n<p>It went like\u00a0this:</p>\n<p>I installed Vite and set up a new Vue project. That worked as expected until I\u00a0ran:</p>\n<pre>npm install</pre>\n<p>At which point I got these\u00a0errors:</p>\n<pre>npm ERR! code ENOENT<br>[...lots of other error logs...]<br>npm ERR! enoent This is related to npm not being able to find a file.</pre>\n<h4>Solutions</h4>\n<p>Then I\u00a0ran:</p>\n<pre>npm cache verify </pre>\n<p>After which I\u00a0got:</p>\n<pre><br>npm ERR! code EACCES <br>npm ERR! Your cache folder contains root-owned files, due to a <br>bug in previous versions of npm which has since been addressed. </pre>\n<p>Followed by what appeared to be a solution:</p>\n<pre> <br>npm ERR! To permanently fix this problem, please run:<br>sudo chown -R 501:20 \u201c/Users/yourusername/.npm\u201d </pre>\n<p>So I\u00a0ran:</p>\n<pre>sudo chown -R 501:20 \u201c/Users/myusername/.npm </pre>\n<p>Which solved the problem. No more npm ERR!, no more sudo, no more\u00a0red.</p>\n<p>Some other options to try if the above doesn\u2019t work for\u00a0you:</p>\n<pre># update npm to the latest version<br>npm install -g npm@latest<br><br># clean/clear npm cache<br>npm cache clean --force<br><br># delete node modules and package-lock.json <br>npm rm -rf node_modules &amp;&amp; rm package-lock.json<br><br># rerun npm install for dependencies<br>npm install </pre>\n<p>Check out <a href=\"https://sebhastian.com/npm-err-enoent/\">this article</a> for\u00a0more.</p>\n<h4>Conclusion</h4>\n<p>There\u2019s nothing worse than errors even before you start coding. Hopefully this helps get you out of the frustrating error zone and back into a creative space. Let me know if this works for you and feel free to comment if it doesn\u2019t, or you come across better options.\u00a0Thanks!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=45209113afe9\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "vuejs",
                "npm",
                "error",
                "vitejs"
            ]
        },
        {
            "id": "3",
            "title": "How to get the first item in an array in Vue.js",
            "pubDate": "2023-02-18 03:24:51",
            "link": "https://medium.com/@andrewmasonmedia/how-to-get-the-first-item-in-an-array-in-vue-js-4452e1820aee?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/4452e1820aee",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*67wrL6hR6F5denCm",
            "description": "\n<p>It\u2019s always useful being able to single out the first item in an array. Be it for styling, conditional rendering, or more, there are a few simple ways we can do this with Vue.js using both baked-in Vue methods, and some javascript.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*67wrL6hR6F5denCm\"><figcaption>Photo by <a href=\"https://unsplash.com/@djpaine?utm_source=medium&amp;utm_medium=referral\">DJ Paine</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>There are a number of ways to get the first value in an array using Vue.js. In this article we\u2019ll\u00a0use:</p>\n<p>1. The slice() method<br>2. The filter() method<br>3. arr[index]<br>4. Array Destructuring<br>5. Using the array index inside a v-for\u00a0loop</p>\n<p>First let\u2019s create a simple example array to\u00a0use:</p>\n<p>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']</p>\n<p>Then let\u2019s declare it in Vue using the Options API as a data\u00a0option:</p>\n<pre>export default {<br>data() {<br>   basses: ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>  }<br>}</pre>\n<p>Or in Vue 3 with the Composition API as a constant:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;</pre>\n<blockquote>For ease through the rest of the article I\u2019ll use the Composition API variation above.</blockquote>\n<p>1First, the slice() method. slice() lets you return either a single item, or a range of values in an array by specifying the starting and ending indexes you want. It will cut out whatever isn\u2019t in this range, and return only the selected values from the total\u00a0array.</p>\n<pre>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br><br>basses.slice(0, 1)<br><br>// output<br>// Fender</pre>\n<p>In the template, we can then render the sliced array in a couple\u00a0ways:</p>\n<p>1. By looping over it with v-for\u00a0:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in basses.slice(0, 1)\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p>2. By using a computed property:</p>\n<pre><br>&lt;script setup&gt;<br>import { computed } from 'vue'<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez'];<br>const bassSlice = computed(() =&gt; basses.slice(0, 1));<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(item, index) in bassSlice\" :key=\"index\"&gt;<br>        {{ item }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p>2 Next is the filter() method. As its name implies filter() filters out one or more items from an array based on some condition/preference. We can use this in a couple ways, similar to\u00a0slice().</p>\n<ol><li>Declare a constant bassFilter that makes use of the optional index property, which loops over the array and accesses the index of every item. We can then filter out each array element by assigning them to different variables, singling out the first for our\u00a0example.</li></ol>\n<p>So here we specify the index we want (i.e. 0) and assign it to the bassFilter constant:</p>\n<pre><br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>console.log(bassFilter)<br><br>// returns ['Fender']</pre>\n<p>We can then use bassFilter to render the first item in the\u00a0array.</p>\n<p>*A note at this point\u200a\u2014\u200alike the example above, even though we\u2019re only rendering the first value, we have to iterate over it as though it\u2019s still an array (which it is). filter()returns a new array with the filtered value(s) in it. If you don\u2019t, you\u2019ll return the entire array with a single value inside, not the first value we want as a string,\u00a0i.e:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez'];<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ bassFilter }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// ['Fender']</pre>\n<p>So you have to use v-for to get the value of the first element to\u00a0render:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in bassFilter\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p>2. You can also use bracket notation without needing to loop over the filtered\u00a0array:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ bassFilter[0] }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p><a href=\"https://www.freecodecamp.org/news/javascript-array-filter-tutorial-how-to-iterate-through-elements-in-an-array/\"><strong><em>Here</em></strong></a><em> is a great article for more on the </em><em>filter()\u00a0method.</em></p>\n<p>3 The third method is using the arr[index] approach. Here, you specify the index of the array you want by adding square brackets at the end of the array variable. This is an older approach but works nicely if you have a single element (especially the first or last) you want to return from an\u00a0array.</p>\n<p>In our template, we can render in a similar way, looping over the\u00a0array:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in basses[0]\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p><strong>Sidenote:</strong> Like in example #2, we again have to loop over the array to render the first value as a string. If you don\u2019t iterate over it, you\u2019ll be returning the entire array with a single value inside, not just the first value itself,\u00a0i.e:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ basses[0] }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// ['Fender']<br></pre>\n<p>3 The third method is <strong>array destructuring</strong>. Using destructuring we can extract data from arrays by assigning array values to newly named variables.</p>\n<p>For example:</p>\n<pre>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br><br>let [Jazz, ACseries, Monarch, Talman] = basses<br><br>console.log(Jazz)<br>console.log(ACseries)<br><br>// output<br>// Fender<br>// Fbass<br>// etc, etc.</pre>\n<p>This seems kind of semantic though\u200a\u2014\u200aall we\u2019re doing is using a different approach to assign new variable names to single array\u00a0values.</p>\n<p>What\u2019s valuable right away though is being able to single out a given value, especially the\u00a0first:</p>\n<pre>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br><br>let [Jazz] = basses<br><br>or let [Jazz,,,,] = basses // this omits the remaining array values (one comma for every value, not including the first comma).<br>or let [Jazz,...restOfBasses] // this assign all the remaining array values to the restOfBasses variable.<br><br>console.log(Jazz)<br><br>// output<br>// Fender</pre>\n<p>So again in the template we can\u00a0do:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>let [Jazz] = basses<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ Jazz }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender<br></pre>\n<p><em>Find out more about array and object destructuring </em><a href=\"https://www.freecodecamp.org/news/array-and-object-destructuring-in-javascript/\"><strong><em>here</em></strong></a><em>.</em></p>\n<p>4 The fourth approach is using the array index along with some CSS and conditional rendering to return only the first item. It\u2019s a little verbose but shows how you can creatively use the array index which is invaluable in a variety of applications.</p>\n<p>In a lot of Vue articles you\u2019ll see code snippets of v-for loops with no index specified.</p>\n<pre>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"bass in basses\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<blockquote>Vite and the Vue CLI will scream \u201cerror\u201d when rendering loops if you don\u2019t have a\u00a0:key=\"\" specified on your v-for. Every loop requires a key to differentiate each entry in the array for rendering. You can usually get away by using key=\u201dbass.id\u201d\u00a0, even if there\u2019s no actual <em>id</em>, but a better way is to use the array\u00a0<strong>index</strong>.</blockquote>\n<pre>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in basses\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<p>What this then does is give you access to the index for styling or conditional rendering. For our example of returning the first item in an array, you can use v-if to only show the first element in the array if the condition is met. If the index is 0 (the first entry), show it. If not,\u00a0don\u2019t.</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;span v-for=\"(bass, index) in basses\" :key=\"index\"&gt;<br>        &lt;li v-if=\"index === 0\"&gt;{{ item }}&lt;/li&gt;<br>      &lt;/span&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output<br>// Fender</pre>\n<h4>Conclusion</h4>\n<p>So there we have a few different ways of getting the first item in an array. What\u2019s great about all of them is they really open doors to different ways of manipulating arrays and array\u00a0values.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4452e1820aee\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>It\u2019s always useful being able to single out the first item in an array. Be it for styling, conditional rendering, or more, there are a few simple ways we can do this with Vue.js using both baked-in Vue methods, and some javascript.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*67wrL6hR6F5denCm\"><figcaption>Photo by <a href=\"https://unsplash.com/@djpaine?utm_source=medium&amp;utm_medium=referral\">DJ Paine</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>There are a number of ways to get the first value in an array using Vue.js. In this article we\u2019ll\u00a0use:</p>\n<p>1. The slice() method<br>2. The filter() method<br>3. arr[index]<br>4. Array Destructuring<br>5. Using the array index inside a v-for\u00a0loop</p>\n<p>First let\u2019s create a simple example array to\u00a0use:</p>\n<p>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']</p>\n<p>Then let\u2019s declare it in Vue using the Options API as a data\u00a0option:</p>\n<pre>export default {<br>data() {<br>   basses: ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>  }<br>}</pre>\n<p>Or in Vue 3 with the Composition API as a constant:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;</pre>\n<blockquote>For ease through the rest of the article I\u2019ll use the Composition API variation above.</blockquote>\n<p>1First, the slice() method. slice() lets you return either a single item, or a range of values in an array by specifying the starting and ending indexes you want. It will cut out whatever isn\u2019t in this range, and return only the selected values from the total\u00a0array.</p>\n<pre>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br><br>basses.slice(0, 1)<br><br>// output<br>// Fender</pre>\n<p>In the template, we can then render the sliced array in a couple\u00a0ways:</p>\n<p>1. By looping over it with v-for\u00a0:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in basses.slice(0, 1)\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p>2. By using a computed property:</p>\n<pre><br>&lt;script setup&gt;<br>import { computed } from 'vue'<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez'];<br>const bassSlice = computed(() =&gt; basses.slice(0, 1));<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(item, index) in bassSlice\" :key=\"index\"&gt;<br>        {{ item }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p>2 Next is the filter() method. As its name implies filter() filters out one or more items from an array based on some condition/preference. We can use this in a couple ways, similar to\u00a0slice().</p>\n<ol><li>Declare a constant bassFilter that makes use of the optional index property, which loops over the array and accesses the index of every item. We can then filter out each array element by assigning them to different variables, singling out the first for our\u00a0example.</li></ol>\n<p>So here we specify the index we want (i.e. 0) and assign it to the bassFilter constant:</p>\n<pre><br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>console.log(bassFilter)<br><br>// returns ['Fender']</pre>\n<p>We can then use bassFilter to render the first item in the\u00a0array.</p>\n<p>*A note at this point\u200a\u2014\u200alike the example above, even though we\u2019re only rendering the first value, we have to iterate over it as though it\u2019s still an array (which it is). filter()returns a new array with the filtered value(s) in it. If you don\u2019t, you\u2019ll return the entire array with a single value inside, not the first value we want as a string,\u00a0i.e:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez'];<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ bassFilter }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// ['Fender']</pre>\n<p>So you have to use v-for to get the value of the first element to\u00a0render:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in bassFilter\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p>2. You can also use bracket notation without needing to loop over the filtered\u00a0array:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>const bassFilter = basses.filter((bass, index) =&gt; index == 0);<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ bassFilter[0] }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p><a href=\"https://www.freecodecamp.org/news/javascript-array-filter-tutorial-how-to-iterate-through-elements-in-an-array/\"><strong><em>Here</em></strong></a><em> is a great article for more on the </em><em>filter()\u00a0method.</em></p>\n<p>3 The third method is using the arr[index] approach. Here, you specify the index of the array you want by adding square brackets at the end of the array variable. This is an older approach but works nicely if you have a single element (especially the first or last) you want to return from an\u00a0array.</p>\n<p>In our template, we can render in a similar way, looping over the\u00a0array:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in basses[0]\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender</pre>\n<p><strong>Sidenote:</strong> Like in example #2, we again have to loop over the array to render the first value as a string. If you don\u2019t iterate over it, you\u2019ll be returning the entire array with a single value inside, not just the first value itself,\u00a0i.e:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ basses[0] }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// ['Fender']<br></pre>\n<p>3 The third method is <strong>array destructuring</strong>. Using destructuring we can extract data from arrays by assigning array values to newly named variables.</p>\n<p>For example:</p>\n<pre>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br><br>let [Jazz, ACseries, Monarch, Talman] = basses<br><br>console.log(Jazz)<br>console.log(ACseries)<br><br>// output<br>// Fender<br>// Fbass<br>// etc, etc.</pre>\n<p>This seems kind of semantic though\u200a\u2014\u200aall we\u2019re doing is using a different approach to assign new variable names to single array\u00a0values.</p>\n<p>What\u2019s valuable right away though is being able to single out a given value, especially the\u00a0first:</p>\n<pre>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br><br>let [Jazz] = basses<br><br>or let [Jazz,,,,] = basses // this omits the remaining array values (one comma for every value, not including the first comma).<br>or let [Jazz,...restOfBasses] // this assign all the remaining array values to the restOfBasses variable.<br><br>console.log(Jazz)<br><br>// output<br>// Fender</pre>\n<p>So again in the template we can\u00a0do:</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>let [Jazz] = basses<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li&gt;<br>        {{ Jazz }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output <br>// Fender<br></pre>\n<p><em>Find out more about array and object destructuring </em><a href=\"https://www.freecodecamp.org/news/array-and-object-destructuring-in-javascript/\"><strong><em>here</em></strong></a><em>.</em></p>\n<p>4 The fourth approach is using the array index along with some CSS and conditional rendering to return only the first item. It\u2019s a little verbose but shows how you can creatively use the array index which is invaluable in a variety of applications.</p>\n<p>In a lot of Vue articles you\u2019ll see code snippets of v-for loops with no index specified.</p>\n<pre>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"bass in basses\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<blockquote>Vite and the Vue CLI will scream \u201cerror\u201d when rendering loops if you don\u2019t have a\u00a0:key=\"\" specified on your v-for. Every loop requires a key to differentiate each entry in the array for rendering. You can usually get away by using key=\u201dbass.id\u201d\u00a0, even if there\u2019s no actual <em>id</em>, but a better way is to use the array\u00a0<strong>index</strong>.</blockquote>\n<pre>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;li v-for=\"(bass, index) in basses\" :key=\"index\"&gt;<br>        {{ bass }}<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<p>What this then does is give you access to the index for styling or conditional rendering. For our example of returning the first item in an array, you can use v-if to only show the first element in the array if the condition is met. If the index is 0 (the first entry), show it. If not,\u00a0don\u2019t.</p>\n<pre>&lt;script setup&gt;<br>const basses = ['Fender', 'Fbass', 'Fodera', 'Ibanez']<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;h1&gt;Basses:<br>    &lt;ul&gt;<br>      &lt;span v-for=\"(bass, index) in basses\" :key=\"index\"&gt;<br>        &lt;li v-if=\"index === 0\"&gt;{{ item }}&lt;/li&gt;<br>      &lt;/span&gt;<br>    &lt;/ul&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// output<br>// Fender</pre>\n<h4>Conclusion</h4>\n<p>So there we have a few different ways of getting the first item in an array. What\u2019s great about all of them is they really open doors to different ways of manipulating arrays and array\u00a0values.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4452e1820aee\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "arrays",
                "loops-in-javascript",
                "destructuring",
                "vuejs",
                "filters"
            ]
        },
        {
            "id": "4",
            "title": "How to use environmental variables (.env) in Vue.js and Vite.",
            "pubDate": "2023-01-27 19:39:57",
            "link": "https://medium.com/@andrewmasonmedia/how-to-use-environmental-variables-env-in-vue-js-and-vite-ac2ee73480dd?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/ac2ee73480dd",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*D3igBoWXbkQDoQrw",
            "description": "\n<p>Lately development best practice seems to be putting your API endpoints, login credentials, secrets, etc., into environmental variables which are supposed to make sensitive information more secure. I was going through this process the other day with a new Vite project which required me to look up how to do it again after using the Vue CLI. Here\u2019s what I\u00a0found.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*D3igBoWXbkQDoQrw\"><figcaption>Photo by <a href=\"https://unsplash.com/@mariocalvo?utm_source=medium&amp;utm_medium=referral\">Mario Calvo</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>TL;DR</h4>\n<p>First, on their own, they aren\u2019t secure. Environmental variables are <em>exposed to the client if they\u2019re being used in the frontend of a website or application</em>. They are visible in the build bundle, and while it might be tedious to sift through, they are there to see. You can also see domains used in API calls, as well as other assets, so the idea that environmental variables prevent sensitive data from being seen isn\u2019t accurate (which is what I initially thought). What\u00a0.env <em>does</em> do\u200a\u2014\u200aprovided you add it to your\u00a0.gitignore file\u200a\u2014\u200ais keep any app secrets or sensitive endpoints out of a github repo so they aren\u2019t public. One other useful reason is to reduce redundancy in your code with variables/values that you\u2019ll use a lot. Putting them in a global variable makes them easy to\u00a0reuse.</p>\n<p>Read on to see how to use them in a Vue application with\u00a0Vite.</p>\n<h4>.env</h4>\n<p>Most articles on the topic will tell you something like\u00a0this:</p>\n<blockquote>\u201cEnvironment variables are used to store app secrets and configuration data, which are retrieved by your running app when needed.\u201d\u00a0(<a href=\"https://kinsta.com/knowledgebase/what-is-an-environment-variable/\">source</a>)</blockquote>\n<p>They\u2019ll go on to say it\u2019s good practice to put any sensitive website or application data into environmental variables so they are secure. But how? And\u00a0why?</p>\n<p>If environmental variables are used on the frontend, i.e. an API endpoint used in a GET request to fetch some type of data, that variable will still be seen in the client/browser. It might only be visible in the application bundle (if you\u2019re using a build tool), but it\u2019s still there if someone is interested enough to find it. All that it does is dynamically swap in the variable wherever it\u2019s used at run time\u200a\u2014\u200astill, <em>on the\u00a0client.</em></p>\n<p>So, while there are other uses for EVs, like setting up different types of data or credentials for different development environments (local, dev, production), the main application for using environmental variables\u200a\u2014\u200aas said above\u200a\u2014\u200aespecially on the frontend, is to keep them out of your repo for a modicum of security, and to create reusable global variables which keep your code\u00a0DRY.</p>\n<h4>How to do this in Vue and\u00a0Vite</h4>\n<p>I made a website recently that uses a headless CMS to provide the client with an intuitive GUI so they can change, add, and update text and images themselves. It\u2019s a common developer task and becoming more so with the advent of headless\u00a0CMSs.</p>\n<p>This particular CMS exposes all the site content as an API in JSON format. So the Vue frontend consumes the endpoint and dynamically renders all the data. To create and consume an environmental variable in Vue and Vite, it\u2019s pretty straightforward:</p>\n<h4>Create an\u00a0.env\u00a0file</h4>\n<p>In your project\u2019s <strong>ROOT</strong>, create a new file called\u00a0.env</p>\n<ul>\n<li>This is an important point to note. Do not put the file in the src folder or in any other\u00a0spot.</li>\n<li>A common mistake is getting errors with\u00a0.env files and variables not rendering\u200a\u2014\u200awhich largely can be solved by making sure your\u00a0.env file is in the\u00a0root.</li>\n</ul>\n<h4>Create a variable(s) and add data/value(s)</h4>\n<p>In <strong>Vite</strong>, environmental variables need to be prefixed with VITE_ as in VITE_*variable-name</p>\n<pre>VITE_API_URL=\"https://yourapiendpoint.com\"</pre>\n<p>For reference with the Vue CLI, variables need to be prefixed with\u00a0VUE_APP</p>\n<pre>VUE_APP_API_URL=\"https://yourapiendpoint.com\"</pre>\n<h4>Use/access the variable throughout your application</h4>\n<p>To use environmental variables throughout your site or application in Vite, you use import.meta.env in front of your variable name:\u00a0i.e.</p>\n<pre>import.meta.env.VITE_API_URL</pre>\n<p>And for fetching API data for example (using fetch()), you can call your environmental variable like\u00a0this:</p>\n<pre>fetch(import.meta.env.VITE_API_ENDPOINT)<br>.then(response =&gt; response.json())<br>.then((data) =&gt; {<br>    console.log(data)<br>})</pre>\n<p><strong>To avoid a few common errors when using\u00a0EVs:</strong></p>\n<ul>\n<li>Make sure to restart your dev server after making any changes to your\u00a0.env\u00a0file.</li>\n<li>Put your\u00a0.env file in the project ROOT, not\u00a0src</li>\n<li>Prefix your Vite EVs with\u00a0VITE_</li>\n<li>See <a href=\"https://stackoverflow.com/questions/70709987/how-to-load-environment-variables-from-env-file-using-vite\">here</a> for more troubleshooting.</li>\n</ul>\n<p>Be sure to add your\u00a0.env file to\u00a0.gitignore so your variables don\u2019t get stored in your\u00a0repo.</p>\n<p><strong>And that\u2019s\u00a0it.</strong></p>\n<p>For more on environmental variables, <a href=\"https://kinsta.com/knowledgebase/what-is-an-environment-variable/#why-should-you-use-environment-variables\">here\u2019s</a> an exhaustive article, <a href=\"https://security.stackexchange.com/questions/199248/why-use-env-whats-wrong-with-storing-secrets-in-a-config-php-file-outside-roo\">here\u2019s</a> a good thread, find one more <a href=\"https://support.cloud.engineyard.com/hc/en-us/articles/205407508-Environment-Variables-and-Why-You-Shouldn-t-Use-Them\">here</a> on why you shouldn\u2019t use them, and go straight to the source at the <a href=\"https://vitejs.dev/guide/env-and-mode.html#env-files\">Vite\u00a0docs</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ac2ee73480dd\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>Lately development best practice seems to be putting your API endpoints, login credentials, secrets, etc., into environmental variables which are supposed to make sensitive information more secure. I was going through this process the other day with a new Vite project which required me to look up how to do it again after using the Vue CLI. Here\u2019s what I\u00a0found.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*D3igBoWXbkQDoQrw\"><figcaption>Photo by <a href=\"https://unsplash.com/@mariocalvo?utm_source=medium&amp;utm_medium=referral\">Mario Calvo</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>TL;DR</h4>\n<p>First, on their own, they aren\u2019t secure. Environmental variables are <em>exposed to the client if they\u2019re being used in the frontend of a website or application</em>. They are visible in the build bundle, and while it might be tedious to sift through, they are there to see. You can also see domains used in API calls, as well as other assets, so the idea that environmental variables prevent sensitive data from being seen isn\u2019t accurate (which is what I initially thought). What\u00a0.env <em>does</em> do\u200a\u2014\u200aprovided you add it to your\u00a0.gitignore file\u200a\u2014\u200ais keep any app secrets or sensitive endpoints out of a github repo so they aren\u2019t public. One other useful reason is to reduce redundancy in your code with variables/values that you\u2019ll use a lot. Putting them in a global variable makes them easy to\u00a0reuse.</p>\n<p>Read on to see how to use them in a Vue application with\u00a0Vite.</p>\n<h4>.env</h4>\n<p>Most articles on the topic will tell you something like\u00a0this:</p>\n<blockquote>\u201cEnvironment variables are used to store app secrets and configuration data, which are retrieved by your running app when needed.\u201d\u00a0(<a href=\"https://kinsta.com/knowledgebase/what-is-an-environment-variable/\">source</a>)</blockquote>\n<p>They\u2019ll go on to say it\u2019s good practice to put any sensitive website or application data into environmental variables so they are secure. But how? And\u00a0why?</p>\n<p>If environmental variables are used on the frontend, i.e. an API endpoint used in a GET request to fetch some type of data, that variable will still be seen in the client/browser. It might only be visible in the application bundle (if you\u2019re using a build tool), but it\u2019s still there if someone is interested enough to find it. All that it does is dynamically swap in the variable wherever it\u2019s used at run time\u200a\u2014\u200astill, <em>on the\u00a0client.</em></p>\n<p>So, while there are other uses for EVs, like setting up different types of data or credentials for different development environments (local, dev, production), the main application for using environmental variables\u200a\u2014\u200aas said above\u200a\u2014\u200aespecially on the frontend, is to keep them out of your repo for a modicum of security, and to create reusable global variables which keep your code\u00a0DRY.</p>\n<h4>How to do this in Vue and\u00a0Vite</h4>\n<p>I made a website recently that uses a headless CMS to provide the client with an intuitive GUI so they can change, add, and update text and images themselves. It\u2019s a common developer task and becoming more so with the advent of headless\u00a0CMSs.</p>\n<p>This particular CMS exposes all the site content as an API in JSON format. So the Vue frontend consumes the endpoint and dynamically renders all the data. To create and consume an environmental variable in Vue and Vite, it\u2019s pretty straightforward:</p>\n<h4>Create an\u00a0.env\u00a0file</h4>\n<p>In your project\u2019s <strong>ROOT</strong>, create a new file called\u00a0.env</p>\n<ul>\n<li>This is an important point to note. Do not put the file in the src folder or in any other\u00a0spot.</li>\n<li>A common mistake is getting errors with\u00a0.env files and variables not rendering\u200a\u2014\u200awhich largely can be solved by making sure your\u00a0.env file is in the\u00a0root.</li>\n</ul>\n<h4>Create a variable(s) and add data/value(s)</h4>\n<p>In <strong>Vite</strong>, environmental variables need to be prefixed with VITE_ as in VITE_*variable-name</p>\n<pre>VITE_API_URL=\"https://yourapiendpoint.com\"</pre>\n<p>For reference with the Vue CLI, variables need to be prefixed with\u00a0VUE_APP</p>\n<pre>VUE_APP_API_URL=\"https://yourapiendpoint.com\"</pre>\n<h4>Use/access the variable throughout your application</h4>\n<p>To use environmental variables throughout your site or application in Vite, you use import.meta.env in front of your variable name:\u00a0i.e.</p>\n<pre>import.meta.env.VITE_API_URL</pre>\n<p>And for fetching API data for example (using fetch()), you can call your environmental variable like\u00a0this:</p>\n<pre>fetch(import.meta.env.VITE_API_ENDPOINT)<br>.then(response =&gt; response.json())<br>.then((data) =&gt; {<br>    console.log(data)<br>})</pre>\n<p><strong>To avoid a few common errors when using\u00a0EVs:</strong></p>\n<ul>\n<li>Make sure to restart your dev server after making any changes to your\u00a0.env\u00a0file.</li>\n<li>Put your\u00a0.env file in the project ROOT, not\u00a0src</li>\n<li>Prefix your Vite EVs with\u00a0VITE_</li>\n<li>See <a href=\"https://stackoverflow.com/questions/70709987/how-to-load-environment-variables-from-env-file-using-vite\">here</a> for more troubleshooting.</li>\n</ul>\n<p>Be sure to add your\u00a0.env file to\u00a0.gitignore so your variables don\u2019t get stored in your\u00a0repo.</p>\n<p><strong>And that\u2019s\u00a0it.</strong></p>\n<p>For more on environmental variables, <a href=\"https://kinsta.com/knowledgebase/what-is-an-environment-variable/#why-should-you-use-environment-variables\">here\u2019s</a> an exhaustive article, <a href=\"https://security.stackexchange.com/questions/199248/why-use-env-whats-wrong-with-storing-secrets-in-a-config-php-file-outside-roo\">here\u2019s</a> a good thread, find one more <a href=\"https://support.cloud.engineyard.com/hc/en-us/articles/205407508-Environment-Variables-and-Why-You-Shouldn-t-Use-Them\">here</a> on why you shouldn\u2019t use them, and go straight to the source at the <a href=\"https://vitejs.dev/guide/env-and-mode.html#env-files\">Vite\u00a0docs</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ac2ee73480dd\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "vitejs",
                "vuejs"
            ]
        },
        {
            "id": "5",
            "title": "How to use Transitions in Vue 3",
            "pubDate": "2023-01-23 15:14:46",
            "link": "https://medium.com/@andrewmasonmedia/how-to-use-transitions-in-vue-3-54ce7674bc48?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/54ce7674bc48",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*42ty9DiTatKnJx2b",
            "description": "\n<p>The native transition component in Vue has undergone some changes with the move to Vue 3. I went to use it the other day and found there were some updates I needed to incorporate to get it to work the way it did in Vue 2. Here\u2019s how it\u00a0works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*42ty9DiTatKnJx2b\"><figcaption>Photo by <a href=\"https://unsplash.com/@jrkorpa?utm_source=medium&amp;utm_medium=referral\">Jr Korpa</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Vue 2 Transitions</h4>\n<p>Transitions in Vue 2 used the &lt;transition&gt; component, with the lowercase syntax, as did&lt;transition-group&gt; for animating multiple elements. The same name=\"\" and mode=\"\" attributes work in Vue 3, as do the javascript hooks:</p>\n<pre>@before-enter=\"onBeforeEnter\"<br>@enter=\"onEnter\"<br>@after-enter=\"onAfterEnter\"<br>@enter-cancelled=\"onEnterCancelled\"<br>@before-leave=\"onBeforeLeave\"<br>@leave=\"onLeave\"<br>@after-leave=\"onAfterLeave\"<br>@leave-cancelled=\"onLeaveCancelled\"</pre>\n<h4>Vue 3</h4>\n<p>The main difference in Vue 3, is the transition component is uppercase, as in &lt;Transition&gt;and &lt;TransitionGroup&gt;.</p>\n<p>And maybe more importantly, there\u2019s a new CSS class that can be added to the transition (provided you\u2019re using CSS) which takes care of the positioning of elements that move, overlay, or replace each\u00a0other.</p>\n<p>With lists and &lt;TransitionGroup&gt; where multiple items are animated, you previously had to add a separate position: absolute CSS to the elements directly. Now you can add a *-leave-active {} class to the transition animation CSS:</p>\n<pre>/* where *animation* is the name of your animation */<br>/* this ensures leaving items are taken out of layout flow so that moving<br>   animations can be calculated correctly. */<br><br>.*animation*-leave-active {<br>  position: absolute;<br>}</pre>\n<h4>Transition keys</h4>\n<p>Don\u2019t forget, as with Vue 2, animating lists and multiple elements using &lt;TransitionGroup&gt; requires each item in the group to have a unique\u00a0:key=\"\" attribute so Vue can identify each element. The name of the key can be anything you want. Best practice tends to use numbers for each element, but it\u2019s up to\u00a0you.</p>\n<p>Here\u2019s a full example, using &lt;TransitionGroup&gt;:</p>\n<pre>&lt;template&gt;<br>  &lt;TransitionGroup name=\"fade\" mode=\"out-in\"&gt;<br>    &lt;div :key=\"1\"&gt;<br>      &lt;p&gt;This is the first element&lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;div :key=\"2\"&gt;<br>      &lt;p&gt;This is the second element&lt;/p&gt;<br>    &lt;/div&gt;<br>  &lt;/TransitionGroup&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br><br>/* apply the *-move class for moving elements */<br>.fade-move,<br>.fade-enter-active,<br>.fade-leave-active {<br>  transition: opacity 0.5s ease-in-out;<br>}<br>.fade-enter-from,<br>.fade-leave-to {<br>  opacity: 0;<br>}<br><br>/* ensure leaving items are taken out of layout flow so that moving<br>   animations can be calculated correctly. */<br>.fade-leave-active {<br>  position: absolute;<br>}<br><br>&lt;/style&gt;</pre>\n<p>Check out the official Vue <a href=\"https://vuejs.org/guide/built-ins/transition-group.html\">docs</a> for more detail on using Transitions.</p>\n<blockquote><strong>I\u2019m planning to follow up on this post with more in depth examples using GSAP, nested transitions, and javascript hooks. Stay\u00a0tuned.</strong></blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=54ce7674bc48\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>The native transition component in Vue has undergone some changes with the move to Vue 3. I went to use it the other day and found there were some updates I needed to incorporate to get it to work the way it did in Vue 2. Here\u2019s how it\u00a0works.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*42ty9DiTatKnJx2b\"><figcaption>Photo by <a href=\"https://unsplash.com/@jrkorpa?utm_source=medium&amp;utm_medium=referral\">Jr Korpa</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Vue 2 Transitions</h4>\n<p>Transitions in Vue 2 used the &lt;transition&gt; component, with the lowercase syntax, as did&lt;transition-group&gt; for animating multiple elements. The same name=\"\" and mode=\"\" attributes work in Vue 3, as do the javascript hooks:</p>\n<pre>@before-enter=\"onBeforeEnter\"<br>@enter=\"onEnter\"<br>@after-enter=\"onAfterEnter\"<br>@enter-cancelled=\"onEnterCancelled\"<br>@before-leave=\"onBeforeLeave\"<br>@leave=\"onLeave\"<br>@after-leave=\"onAfterLeave\"<br>@leave-cancelled=\"onLeaveCancelled\"</pre>\n<h4>Vue 3</h4>\n<p>The main difference in Vue 3, is the transition component is uppercase, as in &lt;Transition&gt;and &lt;TransitionGroup&gt;.</p>\n<p>And maybe more importantly, there\u2019s a new CSS class that can be added to the transition (provided you\u2019re using CSS) which takes care of the positioning of elements that move, overlay, or replace each\u00a0other.</p>\n<p>With lists and &lt;TransitionGroup&gt; where multiple items are animated, you previously had to add a separate position: absolute CSS to the elements directly. Now you can add a *-leave-active {} class to the transition animation CSS:</p>\n<pre>/* where *animation* is the name of your animation */<br>/* this ensures leaving items are taken out of layout flow so that moving<br>   animations can be calculated correctly. */<br><br>.*animation*-leave-active {<br>  position: absolute;<br>}</pre>\n<h4>Transition keys</h4>\n<p>Don\u2019t forget, as with Vue 2, animating lists and multiple elements using &lt;TransitionGroup&gt; requires each item in the group to have a unique\u00a0:key=\"\" attribute so Vue can identify each element. The name of the key can be anything you want. Best practice tends to use numbers for each element, but it\u2019s up to\u00a0you.</p>\n<p>Here\u2019s a full example, using &lt;TransitionGroup&gt;:</p>\n<pre>&lt;template&gt;<br>  &lt;TransitionGroup name=\"fade\" mode=\"out-in\"&gt;<br>    &lt;div :key=\"1\"&gt;<br>      &lt;p&gt;This is the first element&lt;/p&gt;<br>    &lt;/div&gt;<br>    &lt;div :key=\"2\"&gt;<br>      &lt;p&gt;This is the second element&lt;/p&gt;<br>    &lt;/div&gt;<br>  &lt;/TransitionGroup&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;<br><br>/* apply the *-move class for moving elements */<br>.fade-move,<br>.fade-enter-active,<br>.fade-leave-active {<br>  transition: opacity 0.5s ease-in-out;<br>}<br>.fade-enter-from,<br>.fade-leave-to {<br>  opacity: 0;<br>}<br><br>/* ensure leaving items are taken out of layout flow so that moving<br>   animations can be calculated correctly. */<br>.fade-leave-active {<br>  position: absolute;<br>}<br><br>&lt;/style&gt;</pre>\n<p>Check out the official Vue <a href=\"https://vuejs.org/guide/built-ins/transition-group.html\">docs</a> for more detail on using Transitions.</p>\n<blockquote><strong>I\u2019m planning to follow up on this post with more in depth examples using GSAP, nested transitions, and javascript hooks. Stay\u00a0tuned.</strong></blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=54ce7674bc48\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "vuejs",
                "transitions",
                "animation",
                "vue-3"
            ]
        },
        {
            "id": "6",
            "title": "How to deploy a Vue application to Cloudflare Pages (and fix build errors with Vite).",
            "pubDate": "2022-12-01 17:04:55",
            "link": "https://medium.com/@andrewmasonmedia/how-to-deploy-a-vue-application-to-cloudflare-pages-and-fix-build-errors-with-vite-4a537614770f?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/4a537614770f",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*lT8-2Ta9Lt8Qll-D",
            "description": "\n<p>I\u2019ve been using Netlify for the past couple years for app and static site deployment and it\u2019s been great. But I just read a great <a href=\"https://medium.com/@naubit/top-free-heroku-alternatives-for-every-case-49358dfd72b6\"><strong>post</strong></a> about free level cloud hosting alternatives for developers which suggested a few options I didn\u2019t know about. There\u2019s a lot out there these days but many (if not most) have limited bandwidth, restrictions on build minutes, and other gates that require a pay tier to remove or improve. Turns out Cloudflare Pages is a pretty decent looking option for Vue (and other) applications and static sites. Here\u2019s how I got\u00a0started.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lT8-2Ta9Lt8Qll-D\"><figcaption>Photo by <a href=\"https://unsplash.com/@jdent?utm_source=medium&amp;utm_medium=referral\">Jason Dent</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>The first step is to (as always) give away your data and create a Cloudflare Pages account;)</h4>\n<p>A sidebar on this (not an ad or any kind of promotion): I recently setup a free privacy <a href=\"https://spreadprivacy.com/introducing-email-protection-beta/\">email address</a> redirect using Duck Duck Go. They give you a youraddress@duck.com email that you use instead of your regular email address when submitting forms or creating accounts. It intercepts emails, strips them of trackers, then forwards them to your regular email address (i.e. youraddress@gmail).</p>\n<p>From the Duck Duck Go\u00a0website:</p>\n<ul>\n<li>\n<em>Emails sent to [your free personal email] will forward to your regular inbox, with most of the creepy </em><strong><em>email trackers\u00a0removed</em></strong><em>.</em>\n</li>\n<li>\n<em>Generate </em><strong><em>unique private email addresses</em></strong><em> in the DuckDuckGo app and extension so you can\u2019t be tracked by your email\u00a0address.</em>\n</li>\n<li>\n<em>DuckDuckGo </em><strong><em>never saves your\u00a0email</em></strong><em>.</em>\n</li>\n</ul>\n<p><em>\u201cReading your email should be a private activity. You may be surprised to learn that we found over 85% of emails sent to Duck Addresses contained trackers that can detect when you\u2019ve opened a message, where you were when you opened it, and what device you were using. If that isn\u2019t creepy enough, this email data can be used to </em><a href=\"https://senglehardt.com/papers/pets18_email_tracking.pdf\"><em>profile you</em></a><em>, including to target you with ads, and influence the content you see online. Ever open an email and see a related ad about it soon thereafter? Yup, blame email trackers. This data about you is also usually sent directly to third parties, most likely without your consent.\u201d</em></p>\n<p>After this I have less problem making new accounts\u200a\u2014\u200ait\u2019s not a bulletproof solution but it\u2019s at least a step toward improving email and account\u00a0privacy.</p>\n<h4>Cloudflare Pages\u00a0setup</h4>\n<p>Then you follow the steps to create a new project and integrate your account with your github profile (you can choose whether to allow access to all repos, some repos, organizations, etc).</p>\n<p>For example:</p>\n<ul>\n<li>In your Cloudflare dashboard, select Pages in the left\u00a0sidebar.</li>\n<li>Select the Create a project button (you\u2019ll get a dropdown with Connect to Git or Direct\u00a0Upload)</li>\n<li>Select source (Github or Gitlab) and authenticate with your account credentials. (You can configure Cloudflare settings and access inside your Github account).</li>\n<li>Choose a repo to\u00a0deploy.</li>\n<li>Select the Begin setup button and continue to select and configure your deployment options (they have a great list of supported static site generators and frontend frameworks\u200a\u2014\u200aVue, React, Nuxt, Next, Gatsby,\u00a0etc.)</li>\n<li>*For <strong>Vite</strong>\u200a\u2014\u200aa note on build command, I initially used npm run build, but changed it to <strong>vite build\u00a0.</strong>\n</li>\n<li>Select Save and\u00a0Deploy.</li>\n<li>And if you\u2019re like me you might get an error on first\u00a0try.</li>\n</ul>\n<p><em>*</em><a href=\"https://dev.to/jgngo/vue-3-vite-on-cloudflare-pages-4l02\"><em>This article</em></a><em> helped me find the node.js version solution\u00a0below.</em></p>\n<h4>Initial build\u00a0errors</h4>\n<p>On my first go at deploying a simple Vue 3 application with Vite, I got an error. Seemed something in the bundle was \u201cexperimental\u201d and triggered a failure. When I <a href=\"https://dev.to/jgngo/vue-3-vite-on-cloudflare-pages-4l02\">looked it up</a>, a couple responses had the same solution:</p>\n<blockquote>Cloudflare apparently uses a slightly older version of\u00a0Node.js.</blockquote>\n<p>My working version at the time was 16.17.0. The posts suggested to scale it back to 16.15.0. And you implement it by setting an environmental variable <em>inside your build settings in Cloudflare Pages.</em></p>\n<ul>\n<li>So you select Build settings.</li>\n<li>Then select Environmental Variables in the left side\u00a0menu.</li>\n<li>Click the Add variables button.</li>\n<li>Enter NODE_VERSION as the variable name and 16.15.0 as the variable\u00a0value.</li>\n</ul>\n<blockquote>Because Cloudflare (and Node itself) continually updates versions, it\u2019s best to check back frequently to see what\u2019s what and if versions have changed so your deployments don\u2019t\u00a0break.</blockquote>\n<h4>Conclusion</h4>\n<p>So far Cloudflare Pages seems like a good option for deploying personal and development/testing projects. I\u2019ll be checking it out more, but on first look, the developer experience is great, deployment is quick, and there seems to be a decent support network from the (very) small amount of searching I\u2019ve done. You can find more about the free plan limits\u00a0<a href=\"https://developers.cloudflare.com/workers/platform/limits\"><strong>here</strong></a>.</p>\n<p>If you found this article useful, like the writing, or otherwise want to offer support for my blog, please feel free to click the link below to buy a coffee or make a donation. Everything helps. Your support is greatly appreciated!</p>\n<figure><a href=\"https://www.buymeacoffee.com/bassfx\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/170/1*9vg3-OY14aZN1UpKwIxxZg.png\"></a><figcaption>Feel free to support my writing with a donation!</figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4a537614770f\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>I\u2019ve been using Netlify for the past couple years for app and static site deployment and it\u2019s been great. But I just read a great <a href=\"https://medium.com/@naubit/top-free-heroku-alternatives-for-every-case-49358dfd72b6\"><strong>post</strong></a> about free level cloud hosting alternatives for developers which suggested a few options I didn\u2019t know about. There\u2019s a lot out there these days but many (if not most) have limited bandwidth, restrictions on build minutes, and other gates that require a pay tier to remove or improve. Turns out Cloudflare Pages is a pretty decent looking option for Vue (and other) applications and static sites. Here\u2019s how I got\u00a0started.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*lT8-2Ta9Lt8Qll-D\"><figcaption>Photo by <a href=\"https://unsplash.com/@jdent?utm_source=medium&amp;utm_medium=referral\">Jason Dent</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>The first step is to (as always) give away your data and create a Cloudflare Pages account;)</h4>\n<p>A sidebar on this (not an ad or any kind of promotion): I recently setup a free privacy <a href=\"https://spreadprivacy.com/introducing-email-protection-beta/\">email address</a> redirect using Duck Duck Go. They give you a youraddress@duck.com email that you use instead of your regular email address when submitting forms or creating accounts. It intercepts emails, strips them of trackers, then forwards them to your regular email address (i.e. youraddress@gmail).</p>\n<p>From the Duck Duck Go\u00a0website:</p>\n<ul>\n<li>\n<em>Emails sent to [your free personal email] will forward to your regular inbox, with most of the creepy </em><strong><em>email trackers\u00a0removed</em></strong><em>.</em>\n</li>\n<li>\n<em>Generate </em><strong><em>unique private email addresses</em></strong><em> in the DuckDuckGo app and extension so you can\u2019t be tracked by your email\u00a0address.</em>\n</li>\n<li>\n<em>DuckDuckGo </em><strong><em>never saves your\u00a0email</em></strong><em>.</em>\n</li>\n</ul>\n<p><em>\u201cReading your email should be a private activity. You may be surprised to learn that we found over 85% of emails sent to Duck Addresses contained trackers that can detect when you\u2019ve opened a message, where you were when you opened it, and what device you were using. If that isn\u2019t creepy enough, this email data can be used to </em><a href=\"https://senglehardt.com/papers/pets18_email_tracking.pdf\"><em>profile you</em></a><em>, including to target you with ads, and influence the content you see online. Ever open an email and see a related ad about it soon thereafter? Yup, blame email trackers. This data about you is also usually sent directly to third parties, most likely without your consent.\u201d</em></p>\n<p>After this I have less problem making new accounts\u200a\u2014\u200ait\u2019s not a bulletproof solution but it\u2019s at least a step toward improving email and account\u00a0privacy.</p>\n<h4>Cloudflare Pages\u00a0setup</h4>\n<p>Then you follow the steps to create a new project and integrate your account with your github profile (you can choose whether to allow access to all repos, some repos, organizations, etc).</p>\n<p>For example:</p>\n<ul>\n<li>In your Cloudflare dashboard, select Pages in the left\u00a0sidebar.</li>\n<li>Select the Create a project button (you\u2019ll get a dropdown with Connect to Git or Direct\u00a0Upload)</li>\n<li>Select source (Github or Gitlab) and authenticate with your account credentials. (You can configure Cloudflare settings and access inside your Github account).</li>\n<li>Choose a repo to\u00a0deploy.</li>\n<li>Select the Begin setup button and continue to select and configure your deployment options (they have a great list of supported static site generators and frontend frameworks\u200a\u2014\u200aVue, React, Nuxt, Next, Gatsby,\u00a0etc.)</li>\n<li>*For <strong>Vite</strong>\u200a\u2014\u200aa note on build command, I initially used npm run build, but changed it to <strong>vite build\u00a0.</strong>\n</li>\n<li>Select Save and\u00a0Deploy.</li>\n<li>And if you\u2019re like me you might get an error on first\u00a0try.</li>\n</ul>\n<p><em>*</em><a href=\"https://dev.to/jgngo/vue-3-vite-on-cloudflare-pages-4l02\"><em>This article</em></a><em> helped me find the node.js version solution\u00a0below.</em></p>\n<h4>Initial build\u00a0errors</h4>\n<p>On my first go at deploying a simple Vue 3 application with Vite, I got an error. Seemed something in the bundle was \u201cexperimental\u201d and triggered a failure. When I <a href=\"https://dev.to/jgngo/vue-3-vite-on-cloudflare-pages-4l02\">looked it up</a>, a couple responses had the same solution:</p>\n<blockquote>Cloudflare apparently uses a slightly older version of\u00a0Node.js.</blockquote>\n<p>My working version at the time was 16.17.0. The posts suggested to scale it back to 16.15.0. And you implement it by setting an environmental variable <em>inside your build settings in Cloudflare Pages.</em></p>\n<ul>\n<li>So you select Build settings.</li>\n<li>Then select Environmental Variables in the left side\u00a0menu.</li>\n<li>Click the Add variables button.</li>\n<li>Enter NODE_VERSION as the variable name and 16.15.0 as the variable\u00a0value.</li>\n</ul>\n<blockquote>Because Cloudflare (and Node itself) continually updates versions, it\u2019s best to check back frequently to see what\u2019s what and if versions have changed so your deployments don\u2019t\u00a0break.</blockquote>\n<h4>Conclusion</h4>\n<p>So far Cloudflare Pages seems like a good option for deploying personal and development/testing projects. I\u2019ll be checking it out more, but on first look, the developer experience is great, deployment is quick, and there seems to be a decent support network from the (very) small amount of searching I\u2019ve done. You can find more about the free plan limits\u00a0<a href=\"https://developers.cloudflare.com/workers/platform/limits\"><strong>here</strong></a>.</p>\n<p>If you found this article useful, like the writing, or otherwise want to offer support for my blog, please feel free to click the link below to buy a coffee or make a donation. Everything helps. Your support is greatly appreciated!</p>\n<figure><a href=\"https://www.buymeacoffee.com/bassfx\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/170/1*9vg3-OY14aZN1UpKwIxxZg.png\"></a><figcaption>Feel free to support my writing with a donation!</figcaption></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4a537614770f\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "cloudflare-pages",
                "deployment",
                "vuejs",
                "cloud",
                "vitejs"
            ]
        },
        {
            "id": "7",
            "title": "How to get all routes (and the current route) in Vue Router with Vue 3 Composition API.",
            "pubDate": "2022-11-17 15:06:46",
            "link": "https://medium.com/@andrewmasonmedia/how-to-get-all-routes-and-the-current-route-in-vue-router-with-vue-3-composition-api-b98b595d0858?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/b98b595d0858",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*RRXUiPiWMd5qh0rl",
            "description": "\n<p>I loved the this.$router method for accessing routes and route params from the Vue Router with the Options API. It was great for looping over all your routes and rendering them in a simple nav or footer component. But enter Vue 3 and the Composition API: everything went to\u00a0shit.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RRXUiPiWMd5qh0rl\"><figcaption>Photo by <a href=\"https://unsplash.com/@jannerboy62?utm_source=medium&amp;utm_medium=referral\">Nick Fewings</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Returning all\u00a0routes</h4>\n<p>When referring to the router in the Options API, we can use the this.$router instance variable, and return all routes with this.$router.options.routes. But because this doesn\u2019t refer to object instance in the Composition API, we have to do it differently.</p>\n<p>To get the router reference in the Composition API, the Vue Router gives us the useRouter() method; it has to be imported and then assigned to a constant in the setup\u00a0option.</p>\n<p>From there we can loop over our router variable and get all our\u00a0routes:</p>\n<pre>&lt;script setup&gt;<br>import { useRouter } from 'vue-router'<br>const router = useRouter();<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;nav&gt;<br>      &lt;div v-for=\"(route, index) in router.options.routes\" :key=\"index\"&gt;<br>        &lt;ul&gt;<br>          &lt;router-link :to=\"route.path\"&gt;<br>            &lt;li&gt;{{ route.name }}&lt;/li&gt;<br>          &lt;/router-link&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>    &lt;/nav&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<h4>Getting the current route and route\u00a0params</h4>\n<p>It\u2019s super useful being able to detect or return the current page/route, and its parameters. To do this we again have to change up our approach from Vue 2/Options API. In the composition API, we have to use the Router\u2019s useRoute() function, and like with useRouter(), we import it, assign it to a constant, then use that in the template.</p>\n<p>If we render the location variable below, we\u2019ll get back all the parameters for the current route (\u201c/about\u201d):</p>\n<pre>&lt;script setup&gt;<br>import { useRoute } from 'vue-router'<br>const location = useRoute();<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;p&gt;{{ location }}&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// renders<br><br>\"path\": \"/about\", \"name\": \"About\", \"params\": {}, \"query\": {}, \"hash\": \"\", \"fullPath\": \"/about\", \"matched\": [ { \"path\": \"/about\", \"name\": \"About\", \"meta\": {}, \"props\": { \"default\": false }, \"children\": [], \"instances\": { \"default\": {} }, \"leaveGuards\": { \"Set(0)\": [] }, \"updateGuards\": { \"Set(0)\": [] }, \"enterCallbacks\": {}, \"components\": { \"default\": { \"__name\": \"About\", \"__hmrId\": \"####\", \"__file\": \"/Users/user/projects/my-project/src/views/About.vue\" } } } ], \"meta\": {} }</pre>\n<p>Then if we want to style or conditionally render elements based on the current route, we can leverage location to give us this ability. Say for example we want to change the background colour of the menu on the About page to red. We can specify the route path (or name) and if it returns true we add conditional styles (or classes):</p>\n<p>We can use a ternary operator to check the route, and apply the styles if\u00a0true:</p>\n<pre>&lt;nav :style=\"location.path === '/about' ? 'background: red' : ''\"&gt;<br>  [...]<br>&lt;/nav&gt;</pre>\n<p>So for the complete\u00a0code:</p>\n<pre>&lt;script setup&gt;<br>import { useRoute, useRouter } from 'vue-router'<br>const location = useRoute();<br>const router = useRouter();<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;nav :style=\"location.path === '/about' ? 'background: red' : ''\"&gt;<br>      &lt;div v-for=\"(route, index) in router.options.routes\" :key=\"index\"&gt;<br>        &lt;ul&gt;<br>          &lt;router-link :to=\"route.path\"&gt;<br>            &lt;li&gt;{{ route.name }}&lt;/li&gt;<br>          &lt;/router-link&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>    &lt;/nav&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<h4>Conclusion</h4>\n<p>While I really liked the simple global reference to the $router in the Options API, the useRouter() and useRoute() functions are pretty easy to use with the Composition API.</p>\n<p>Check out <a href=\"https://www.koderhq.com/tutorial/vue/composition-api-router-routing/#current\"><strong>this great article</strong></a> for more detail on Vue Router with Vue 3 and the Composition API.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b98b595d0858\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>I loved the this.$router method for accessing routes and route params from the Vue Router with the Options API. It was great for looping over all your routes and rendering them in a simple nav or footer component. But enter Vue 3 and the Composition API: everything went to\u00a0shit.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*RRXUiPiWMd5qh0rl\"><figcaption>Photo by <a href=\"https://unsplash.com/@jannerboy62?utm_source=medium&amp;utm_medium=referral\">Nick Fewings</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>Returning all\u00a0routes</h4>\n<p>When referring to the router in the Options API, we can use the this.$router instance variable, and return all routes with this.$router.options.routes. But because this doesn\u2019t refer to object instance in the Composition API, we have to do it differently.</p>\n<p>To get the router reference in the Composition API, the Vue Router gives us the useRouter() method; it has to be imported and then assigned to a constant in the setup\u00a0option.</p>\n<p>From there we can loop over our router variable and get all our\u00a0routes:</p>\n<pre>&lt;script setup&gt;<br>import { useRouter } from 'vue-router'<br>const router = useRouter();<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;nav&gt;<br>      &lt;div v-for=\"(route, index) in router.options.routes\" :key=\"index\"&gt;<br>        &lt;ul&gt;<br>          &lt;router-link :to=\"route.path\"&gt;<br>            &lt;li&gt;{{ route.name }}&lt;/li&gt;<br>          &lt;/router-link&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>    &lt;/nav&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<h4>Getting the current route and route\u00a0params</h4>\n<p>It\u2019s super useful being able to detect or return the current page/route, and its parameters. To do this we again have to change up our approach from Vue 2/Options API. In the composition API, we have to use the Router\u2019s useRoute() function, and like with useRouter(), we import it, assign it to a constant, then use that in the template.</p>\n<p>If we render the location variable below, we\u2019ll get back all the parameters for the current route (\u201c/about\u201d):</p>\n<pre>&lt;script setup&gt;<br>import { useRoute } from 'vue-router'<br>const location = useRoute();<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;p&gt;{{ location }}&lt;/p&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>// renders<br><br>\"path\": \"/about\", \"name\": \"About\", \"params\": {}, \"query\": {}, \"hash\": \"\", \"fullPath\": \"/about\", \"matched\": [ { \"path\": \"/about\", \"name\": \"About\", \"meta\": {}, \"props\": { \"default\": false }, \"children\": [], \"instances\": { \"default\": {} }, \"leaveGuards\": { \"Set(0)\": [] }, \"updateGuards\": { \"Set(0)\": [] }, \"enterCallbacks\": {}, \"components\": { \"default\": { \"__name\": \"About\", \"__hmrId\": \"####\", \"__file\": \"/Users/user/projects/my-project/src/views/About.vue\" } } } ], \"meta\": {} }</pre>\n<p>Then if we want to style or conditionally render elements based on the current route, we can leverage location to give us this ability. Say for example we want to change the background colour of the menu on the About page to red. We can specify the route path (or name) and if it returns true we add conditional styles (or classes):</p>\n<p>We can use a ternary operator to check the route, and apply the styles if\u00a0true:</p>\n<pre>&lt;nav :style=\"location.path === '/about' ? 'background: red' : ''\"&gt;<br>  [...]<br>&lt;/nav&gt;</pre>\n<p>So for the complete\u00a0code:</p>\n<pre>&lt;script setup&gt;<br>import { useRoute, useRouter } from 'vue-router'<br>const location = useRoute();<br>const router = useRouter();<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>  &lt;div&gt;<br>     &lt;nav :style=\"location.path === '/about' ? 'background: red' : ''\"&gt;<br>      &lt;div v-for=\"(route, index) in router.options.routes\" :key=\"index\"&gt;<br>        &lt;ul&gt;<br>          &lt;router-link :to=\"route.path\"&gt;<br>            &lt;li&gt;{{ route.name }}&lt;/li&gt;<br>          &lt;/router-link&gt;<br>        &lt;/ul&gt;<br>      &lt;/div&gt;<br>    &lt;/nav&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;</pre>\n<h4>Conclusion</h4>\n<p>While I really liked the simple global reference to the $router in the Options API, the useRouter() and useRoute() functions are pretty easy to use with the Composition API.</p>\n<p>Check out <a href=\"https://www.koderhq.com/tutorial/vue/composition-api-router-routing/#current\"><strong>this great article</strong></a> for more detail on Vue Router with Vue 3 and the Composition API.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b98b595d0858\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "composition-api",
                "vue-router",
                "loop",
                "vue-3",
                "javascript"
            ]
        },
        {
            "id": "8",
            "title": "How to fix Vue Router not scrolling to top on route change.",
            "pubDate": "2022-11-11 16:02:17",
            "link": "https://medium.com/@andrewmasonmedia/how-to-fix-scroll-to-top-scrollbehaviour-not-working-in-vue-router-b443c0fecf91?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/b443c0fecf91",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*6P1vgaq1bYTYbual",
            "description": "\n<p>In standard websites where pages reload, the browser window always scrolls to the top of the page when you navigate. But in applications with frontend frameworks like Vue, where pages don\u2019t reload, this <em>isn\u2019t</em> the default behaviour. To control this, Vue Router has a scrollBehaviour() function that can fine tune how your app behaves navigating between pages: including returning scroll position to the top of the page on navigation. But in my latest Vue project (Vue 3, Vite, Vue Router 4), it wasn\u2019t working. Here\u2019s how I fixed\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6P1vgaq1bYTYbual\"><figcaption>Photo by <a href=\"https://unsplash.com/@mphotographym?utm_source=medium&amp;utm_medium=referral\">Moritz Mentges</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>TL;DR</h4>\n<p>Remove overflow-x: hidden from any parent containers either on your views/pages, or document body\u00a0CSS.</p>\n<h4>Explainer</h4>\n<p>When navigating between pages/routes, Vue Router will automatically maintain the same scroll position it was at on the previous page over onto the new page. It sounds dumb. And in my humble opinion, it should not be the default behaviour. But it\u2019s especially useful when you want to use the browser back button to go back to the specific pair of jeans you were looking at on Amazon\u200a\u2014\u200ainstead of having to start way back at the top (very handy on long scrolling ecommerce sites).</p>\n<p>So, back to my\u00a0app.</p>\n<p>It wouldn\u2019t scroll to the top on route changes. Whatever I did, nothing worked. I googled every variation and wording to find out why. A lot of results came back, but they all pointed to the Vue Router <a href=\"https://router.vuejs.org/guide/advanced/scroll-behavior.html\"><strong>docs</strong></a>. <em>Yes, they said, you can get your routes/pages to scroll to the top like a normal website using the Vue Router.</em> Just do\u00a0this:</p>\n<pre>// always scroll to top<br><br>scrollBehavior(to, from, savedPosition) {<br>  return { top: 0 }<br>},<br><br>//if you don't have a to, from or savedPosition value, remove them.</pre>\n<p>Or do\u00a0this:</p>\n<pre>scrollBehavior() {<br>  return { x: 0, y: 0 }<br>},</pre>\n<p>Or do\u00a0this:</p>\n<pre>scrollBehavior() {<br>  window.scrollTo(0, 0)<br>},</pre>\n<p>Or do this inside each component:</p>\n<pre>// Using Vue 3 setup/Composition<br><br>&lt;script setup&gt;<br>import { onMounted } from 'vue'<br><br>onMounted(() =&gt; {<br>  window.scrollTo(0, 0)<br>})<br>&lt;/script&gt;<br><br>// Using Vue 2 Options<br><br>&lt;script&gt;<br><br>mounted: {<br>  window.scrollTo(0, 0)<br>}<br>&lt;/script&gt;<br></pre>\n<p>But oh no. <strong><em>None</em></strong> of them\u00a0worked.</p>\n<p>I found a number of posts with people having the same problem. All the suggested answers were the same as above. And still nothing worked for\u00a0me.</p>\n<p>So I asked a Vue developer friend of mine if he\u2019d had this problem\u00a0before.</p>\n<p>Yes he\u00a0said.</p>\n<p>For him, a parent container with overflow-x: hidden in the CSS would counteract the Router scrolling to\u00a0top.</p>\n<p>It was a face-slapping moment. I knew I had set overflow-x: hidden on my app\u2019s body to avoid any unwanted overflow. When I removed it, <strong>scroll to top on route change\u00a0worked</strong>.</p>\n<p>After removing overflow: hidden, and adding this in the router/index.js I got my scrollTop:</p>\n<pre>scrollBehavior () {<br>  return { top: 0, left: 0 }<br>}<br><br>// The full router/index.js code:<br><br>const router = createRouter({<br>  history: createWebHistory(import.meta.env.BASE_URL),<br>  routes: [...],<br>  scrollBehavior() {<br>     return { top: 0, left: 0 }<br>   }<br>})</pre>\n<p>And this\u00a0worked:</p>\n<pre> scrollBehavior() {<br>    return new Promise((resolve) =&gt; {<br>      resolve({ left: 0, top: 0 })<br>    })<br>  }</pre>\n<p>So there\u2019s a quick fix for (what should be) a simple problem (that haunted and enraged me). Remove overflow: hidden, and set the above options in your router/index.js file.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b443c0fecf91\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>In standard websites where pages reload, the browser window always scrolls to the top of the page when you navigate. But in applications with frontend frameworks like Vue, where pages don\u2019t reload, this <em>isn\u2019t</em> the default behaviour. To control this, Vue Router has a scrollBehaviour() function that can fine tune how your app behaves navigating between pages: including returning scroll position to the top of the page on navigation. But in my latest Vue project (Vue 3, Vite, Vue Router 4), it wasn\u2019t working. Here\u2019s how I fixed\u00a0it.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*6P1vgaq1bYTYbual\"><figcaption>Photo by <a href=\"https://unsplash.com/@mphotographym?utm_source=medium&amp;utm_medium=referral\">Moritz Mentges</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><h4>TL;DR</h4>\n<p>Remove overflow-x: hidden from any parent containers either on your views/pages, or document body\u00a0CSS.</p>\n<h4>Explainer</h4>\n<p>When navigating between pages/routes, Vue Router will automatically maintain the same scroll position it was at on the previous page over onto the new page. It sounds dumb. And in my humble opinion, it should not be the default behaviour. But it\u2019s especially useful when you want to use the browser back button to go back to the specific pair of jeans you were looking at on Amazon\u200a\u2014\u200ainstead of having to start way back at the top (very handy on long scrolling ecommerce sites).</p>\n<p>So, back to my\u00a0app.</p>\n<p>It wouldn\u2019t scroll to the top on route changes. Whatever I did, nothing worked. I googled every variation and wording to find out why. A lot of results came back, but they all pointed to the Vue Router <a href=\"https://router.vuejs.org/guide/advanced/scroll-behavior.html\"><strong>docs</strong></a>. <em>Yes, they said, you can get your routes/pages to scroll to the top like a normal website using the Vue Router.</em> Just do\u00a0this:</p>\n<pre>// always scroll to top<br><br>scrollBehavior(to, from, savedPosition) {<br>  return { top: 0 }<br>},<br><br>//if you don't have a to, from or savedPosition value, remove them.</pre>\n<p>Or do\u00a0this:</p>\n<pre>scrollBehavior() {<br>  return { x: 0, y: 0 }<br>},</pre>\n<p>Or do\u00a0this:</p>\n<pre>scrollBehavior() {<br>  window.scrollTo(0, 0)<br>},</pre>\n<p>Or do this inside each component:</p>\n<pre>// Using Vue 3 setup/Composition<br><br>&lt;script setup&gt;<br>import { onMounted } from 'vue'<br><br>onMounted(() =&gt; {<br>  window.scrollTo(0, 0)<br>})<br>&lt;/script&gt;<br><br>// Using Vue 2 Options<br><br>&lt;script&gt;<br><br>mounted: {<br>  window.scrollTo(0, 0)<br>}<br>&lt;/script&gt;<br></pre>\n<p>But oh no. <strong><em>None</em></strong> of them\u00a0worked.</p>\n<p>I found a number of posts with people having the same problem. All the suggested answers were the same as above. And still nothing worked for\u00a0me.</p>\n<p>So I asked a Vue developer friend of mine if he\u2019d had this problem\u00a0before.</p>\n<p>Yes he\u00a0said.</p>\n<p>For him, a parent container with overflow-x: hidden in the CSS would counteract the Router scrolling to\u00a0top.</p>\n<p>It was a face-slapping moment. I knew I had set overflow-x: hidden on my app\u2019s body to avoid any unwanted overflow. When I removed it, <strong>scroll to top on route change\u00a0worked</strong>.</p>\n<p>After removing overflow: hidden, and adding this in the router/index.js I got my scrollTop:</p>\n<pre>scrollBehavior () {<br>  return { top: 0, left: 0 }<br>}<br><br>// The full router/index.js code:<br><br>const router = createRouter({<br>  history: createWebHistory(import.meta.env.BASE_URL),<br>  routes: [...],<br>  scrollBehavior() {<br>     return { top: 0, left: 0 }<br>   }<br>})</pre>\n<p>And this\u00a0worked:</p>\n<pre> scrollBehavior() {<br>    return new Promise((resolve) =&gt; {<br>      resolve({ left: 0, top: 0 })<br>    })<br>  }</pre>\n<p>So there\u2019s a quick fix for (what should be) a simple problem (that haunted and enraged me). Remove overflow: hidden, and set the above options in your router/index.js file.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b443c0fecf91\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "javascript",
                "vue-router",
                "scrolltop",
                "vue-3",
                "css"
            ]
        },
        {
            "id": "9",
            "title": "How to get every odd (or even) element in an array with Vue.js",
            "pubDate": "2022-11-10 19:23:51",
            "link": "https://medium.com/@andrewmasonmedia/how-to-get-every-odd-or-even-element-in-an-array-with-vue-js-20d997223be0?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/20d997223be0",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*_3jTek_FTVQMncRN",
            "description": "\n<p>Whether it\u2019s for styling, filtering response data, rendering or other reasons, being able to find and return every odd or even element in an array is a useful\u00a0trick.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_3jTek_FTVQMncRN\"><figcaption>Photo by <a href=\"https://unsplash.com/@lorenzoherrera?utm_source=medium&amp;utm_medium=referral\">Lorenzo Herrera</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>My previous job worked a lot with loops and arrays. Data came in JSON format and devs would have to find creative ways to render it using loops and DRY code as much as possible. This opened up the option of using array indexes to style and render elements dynamically.</p>\n<p>In one instance I wanted to render a list of services (name, type, title, description, link, image) from a JSON API, with a two-column layout that alternated text column on the left, and an image on the right; and vice versa (image on the left, text on the right) for all the entries in the\u00a0array.</p>\n<p>Because I was rendering the data by looping over an array, I needed a method to sort/filter the objects dynamically.</p>\n<p>Enter the\u00a0Modulo!</p>\n<h4>An example</h4>\n<p>Let\u2019s say you have an array of objects, like a list of your github\u00a0repos:</p>\n<pre><a href=\"https://api.github.com/users/octocat/repos\">https://api.github.com/users/octocat/repos</a></pre>\n<p>and you want to display them as a simple vertical unordered list of entries. Additionally you want to style the entries with an alternating zebra stripe (or alternating colours) to differentiate them for ease of\u00a0reading.</p>\n<p>You could do a v-if and specify a hard-coded list of indexes, but that\u2019s not efficient or a viable option with a long array and lots of\u00a0data:</p>\n<pre>&lt;div v-if=\"index === 0 &amp;&amp; index === 2 &amp;&amp; index === 4\" style='background: grey'&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;<br><br>&lt;div v-else style='background: white'&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;</pre>\n<p>Better to use the modulo, modulus, or remainder operator defined by the percentage (%)\u00a0sign.</p>\n<blockquote>\u201cThe modulo operator is used to check if a number is odd or even. This is because even numbers have no remainders when divided by two. Odd numbers, on the other hand, have a remainder if they are divided by\u00a0two.\u201d</blockquote>\n<p><strong>This can be similarly applied to filtering even and odd entries in an array that aren\u2019t\u00a0numbers.</strong></p>\n<p>So to style your array where every <em>other</em> entry has a light grey background, you can loop over your array, and dynamically style the indexes using\u00a0modulo:</p>\n<pre>No remainder when divided by two = Even number<br><strong>index % 2 != 0</strong></pre>\n<pre>Has a remainder when divided by two = Odd number<br><strong>index % 2 === 0</strong></pre>\n<pre><strong>---<br></strong><em>*For reference a remainder is </em><strong><em>the value left after the division of two numbers</em></strong><em>. If a number (dividend) is not completely divisible by another number (divisor) then we are left with a value once the division is done. This value is called the remainder.</em></pre>\n<p>With an array called \u2018<strong>repos\u2019</strong>, you can apply the concept either using dynamic inline\u00a0styles:</p>\n<pre>&lt;div v-for=\"(item, index) in repos\" :key=\"index\" <br>:style=\"index % 2 != 0 ? 'background: lightgrey' : 'background: white'\"&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;</pre>\n<p>Or using dynamic\u00a0classes:</p>\n<pre>&lt;div v-for=\"(item, index) in repos\" :key=\"index\" <br>:class=\"index % 2 != 0 ? 'bg-lightgrey' : index % 2 === 0 ? 'bg-white'\"&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;</pre>\n<p>You can do the same with array filter():</p>\n<pre>function bigOdds() {<br>  const array = ['green', 'red', 'orange', 'pink', 'black'];<br>  const oddItems = array.filter((num, index) =&gt; index % 2 === 0);<br>  console.log(oddItems);<br>}<br><br>bigOdds();<br>// returns array items ['green', 'orange', 'black']</pre>\n<p>And the same with array forEach():</p>\n<pre>function bigOdds() {<br>  const array = ['green', 'red', 'orange', 'pink', 'black'];<br>  let odds = [];<br>  array.forEach(myFunction)<br>  function myFunction(item, index) {<br>    if(index % 2 === 0) {<br>        odds.push(index)<br>    }<br>    console.log(odds);<br>}<br><br>bigOdds()<br>// returns array indexes [0, 2, 4]</pre>\n<p>The modulo gives us a simple way to style data dynamically, and render it creatively using\u00a0Vue.js.</p>\n<blockquote>Check out more about the modulo <a href=\"https://careerkarma.com/blog/javascript-modulo/\"><strong>here</strong></a>, and on how to do return even and odd elements using array.filter, forEach, and for in loop methods\u00a0<a href=\"https://javascript.plainenglish.io/javascript-find-odd-numbers-in-array-79ce3d82fcc1\"><strong>here</strong></a>.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=20d997223be0\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<p>Whether it\u2019s for styling, filtering response data, rendering or other reasons, being able to find and return every odd or even element in an array is a useful\u00a0trick.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*_3jTek_FTVQMncRN\"><figcaption>Photo by <a href=\"https://unsplash.com/@lorenzoherrera?utm_source=medium&amp;utm_medium=referral\">Lorenzo Herrera</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>My previous job worked a lot with loops and arrays. Data came in JSON format and devs would have to find creative ways to render it using loops and DRY code as much as possible. This opened up the option of using array indexes to style and render elements dynamically.</p>\n<p>In one instance I wanted to render a list of services (name, type, title, description, link, image) from a JSON API, with a two-column layout that alternated text column on the left, and an image on the right; and vice versa (image on the left, text on the right) for all the entries in the\u00a0array.</p>\n<p>Because I was rendering the data by looping over an array, I needed a method to sort/filter the objects dynamically.</p>\n<p>Enter the\u00a0Modulo!</p>\n<h4>An example</h4>\n<p>Let\u2019s say you have an array of objects, like a list of your github\u00a0repos:</p>\n<pre><a href=\"https://api.github.com/users/octocat/repos\">https://api.github.com/users/octocat/repos</a></pre>\n<p>and you want to display them as a simple vertical unordered list of entries. Additionally you want to style the entries with an alternating zebra stripe (or alternating colours) to differentiate them for ease of\u00a0reading.</p>\n<p>You could do a v-if and specify a hard-coded list of indexes, but that\u2019s not efficient or a viable option with a long array and lots of\u00a0data:</p>\n<pre>&lt;div v-if=\"index === 0 &amp;&amp; index === 2 &amp;&amp; index === 4\" style='background: grey'&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;<br><br>&lt;div v-else style='background: white'&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;</pre>\n<p>Better to use the modulo, modulus, or remainder operator defined by the percentage (%)\u00a0sign.</p>\n<blockquote>\u201cThe modulo operator is used to check if a number is odd or even. This is because even numbers have no remainders when divided by two. Odd numbers, on the other hand, have a remainder if they are divided by\u00a0two.\u201d</blockquote>\n<p><strong>This can be similarly applied to filtering even and odd entries in an array that aren\u2019t\u00a0numbers.</strong></p>\n<p>So to style your array where every <em>other</em> entry has a light grey background, you can loop over your array, and dynamically style the indexes using\u00a0modulo:</p>\n<pre>No remainder when divided by two = Even number<br><strong>index % 2 != 0</strong></pre>\n<pre>Has a remainder when divided by two = Odd number<br><strong>index % 2 === 0</strong></pre>\n<pre><strong>---<br></strong><em>*For reference a remainder is </em><strong><em>the value left after the division of two numbers</em></strong><em>. If a number (dividend) is not completely divisible by another number (divisor) then we are left with a value once the division is done. This value is called the remainder.</em></pre>\n<p>With an array called \u2018<strong>repos\u2019</strong>, you can apply the concept either using dynamic inline\u00a0styles:</p>\n<pre>&lt;div v-for=\"(item, index) in repos\" :key=\"index\" <br>:style=\"index % 2 != 0 ? 'background: lightgrey' : 'background: white'\"&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;</pre>\n<p>Or using dynamic\u00a0classes:</p>\n<pre>&lt;div v-for=\"(item, index) in repos\" :key=\"index\" <br>:class=\"index % 2 != 0 ? 'bg-lightgrey' : index % 2 === 0 ? 'bg-white'\"&gt;<br>  &lt;!-- your array data --&gt;<br>&lt;/div&gt;</pre>\n<p>You can do the same with array filter():</p>\n<pre>function bigOdds() {<br>  const array = ['green', 'red', 'orange', 'pink', 'black'];<br>  const oddItems = array.filter((num, index) =&gt; index % 2 === 0);<br>  console.log(oddItems);<br>}<br><br>bigOdds();<br>// returns array items ['green', 'orange', 'black']</pre>\n<p>And the same with array forEach():</p>\n<pre>function bigOdds() {<br>  const array = ['green', 'red', 'orange', 'pink', 'black'];<br>  let odds = [];<br>  array.forEach(myFunction)<br>  function myFunction(item, index) {<br>    if(index % 2 === 0) {<br>        odds.push(index)<br>    }<br>    console.log(odds);<br>}<br><br>bigOdds()<br>// returns array indexes [0, 2, 4]</pre>\n<p>The modulo gives us a simple way to style data dynamically, and render it creatively using\u00a0Vue.js.</p>\n<blockquote>Check out more about the modulo <a href=\"https://careerkarma.com/blog/javascript-modulo/\"><strong>here</strong></a>, and on how to do return even and odd elements using array.filter, forEach, and for in loop methods\u00a0<a href=\"https://javascript.plainenglish.io/javascript-find-odd-numbers-in-array-79ce3d82fcc1\"><strong>here</strong></a>.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=20d997223be0\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "api",
                "modulo",
                "javascript",
                "vue-3",
                "looping"
            ]
        },
        {
            "id": "10",
            "title": "Set up a Vue app with Vite, SASS, Vue Router, and other goodies.",
            "pubDate": "2022-10-19 16:13:53",
            "link": "https://medium.com/@andrewmasonmedia/set-up-a-vue-app-with-vite-sass-vue-router-and-other-goodies-30647b82c271?source=rss-8e078f245449------2",
            "guid": "https://medium.com/p/30647b82c271",
            "author": "masonmedia",
            "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*rZj9WU3-xba9Is1d",
            "description": "\n<h3>How to Set up a Vue app with Vite, SASS, Vue Router, Bootstrap, and other\u00a0goodies.</h3>\n<p>I\u2019ve been getting up to speed on Vue 3 and Vite. There are a lot of differences from Vue 2 and the Vue CLI\u200a\u2014\u200aeven just spooling up a new project\u00a0. This article runs through a super simple setup to get you going with all the core\u00a0stuff.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rZj9WU3-xba9Is1d\"><figcaption>Photo by <a href=\"https://unsplash.com/@seemoris?utm_source=medium&amp;utm_medium=referral\">Caleb George</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><blockquote>\n<em>*This article assumes you have node and npm installed on your machine. If not download/install the </em><a href=\"https://nodejs.org/en/download/\"><em>LTS version of node</em></a><em>, and the latest version of\u00a0</em><a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\"><em>npm</em></a><em>.</em>\n</blockquote>\n<h3>Here we\u00a0go</h3>\n<p>Start by installing Vite\u200a\u2014\u200arun this in your terminal:</p>\n<p>npm init vite@latest</p>\n<p>This will prompt you with a bunch of choices for your\u00a0setup:</p>\n<p>\u2714 Project name:\u00a0\u2026 your-super-duper-vite-app-name</p>\n<p>Framework of\u00a0choice:</p>\n<pre>? Select a framework: \u203a \u2014 Use arrow-keys. Return to submit. <br>  Vanilla<br>\u276f Vue<br>  React<br>  Preact<br>  Lit<br>  Svelte</pre>\n<p>Select a variant. For the best customizing experience, select Customize with create-vue:</p>\n<pre>? Select a variant: \u203a \u2014 Use arrow-keys. Return to submit.<br> JavaScript<br> TypeScript<br>\u276f Customize with create-vue<br> Nuxt</pre>\n<p>The selections below are my preferences, but you can choose what works for\u00a0you:</p>\n<pre>\u2714 Select a variant: \u203a Customize with create-vue<br>Vue.js - The Progressive JavaScript Framework</pre>\n<pre>\u2714 Add TypeScript? \u2026 <strong>No</strong> / Yes<br>\u2714 Add JSX Support? \u2026 <strong>No</strong> / Yes<br>\u2714 Add Vue Router for Single Page Application development? \u2026 No / <strong>Yes</strong><br>\u2714 Add Pinia for state management? \u2026 No / <strong>Yes</strong><br>\u2714 Add Vitest for Unit Testing? \u2026 No / <strong>Yes</strong><br>\u2714 Add Cypress for End-to-End testing? \u2026 No / <strong>Yes</strong><br>\u2714 Add ESLint for code quality? \u2026 No / <strong>Yes</strong><br>\u2714 Add Prettier for code formatting? \u2026 No / <strong>Yes</strong></pre>\n<p><a href=\"https://pinia.vuejs.org/\"><strong>Pinia</strong></a> has replaced <a href=\"https://vuex.vuejs.org/\">Vuex</a> as the official state management library for Vue. It works with Vue 2 and 3, and both the options and composition APIs.</p>\n<p>cd into the project folder, install npm, and run your dev\u00a0server:</p>\n<pre>Done. Now run:</pre>\n<pre>cd vite-app<br>npm install<br>npm run dev</pre>\n<h3>SASS</h3>\n<p>For SASS, LESS, or stylus support, you have to install node-sass manually (I use SASS\u200a\u2014\u200asee below for Bootstrap specific notes on installing SASS):</p>\n<pre># .scss and .sass <br><strong>npm add -D sass</strong></pre>\n<pre># .less <br>npm add -D less</pre>\n<pre># .styl and .stylus <br>npm add -D stylus</pre>\n<p><em>Check </em><a href=\"https://vitejs.dev/guide/features.html#css-pre-processors\"><strong><em>here</em></strong></a><em> for Vite docs on CSS preprocessors.</em></p>\n<h3>Bootstrap 5</h3>\n<p>With the latest version 5 of Bootstrap, there is no jQuery so it can be used directly in a Vue project without the need for a wrapper or other library like BootstrapVue (which is admittedly awesome). I like this for the ability to use the latest Bootstrap classes and components, and for keeping your stack current (as of this writing BootstrapVue uses Bootstrap version\u00a04*).</p>\n<p>To install (from the Bootstrap docs under\u00a0<a href=\"https://getbootstrap.com/docs/5.2/getting-started/vite/\">Vite</a>):</p>\n<pre>npm i --save bootstrap @popperjs/core</pre>\n<p>Then <strong>Install additional SASS dependency.</strong> We need another dependency (Sass) to properly import and bundle Bootstrap\u2019s CSS:</p>\n<pre>npm i --save-dev sass</pre>\n<p><strong>Now create an SCSS folder and add a </strong>styles.scss<strong> file inside it to import Bootstrap\u2019s CSS.</strong> The complete path will\u00a0be:</p>\n<pre>./assets/scss/styles.scss</pre>\n<p>Then in styles.scss, import all of Bootstrap\u2019s CSS/SASS files\u00a0with:</p>\n<pre>@import \"~bootstrap/scss/bootstrap\";</pre>\n<p>And import this into your project by going into your main.js file and\u00a0adding:</p>\n<pre>import \"bootstrap/dist/css/bootstrap.min.css\"<br>import \"./assets/scss/styles.scss\"</pre>\n<p><strong><em>*An important note that I missed the first time around with this setup: </em></strong><em>you have to add a few lines in </em>vite.config.js<em> to set up Bootstrap\u2019s SASS import for Vite to find your Bootstrap\u2019s SASS files in </em>node_modules<em>:</em></p>\n<pre>// Add this to your vite.config.js:<br>// const path = require('path')<br>// '~bootstrap': path.resolve(__dirname, 'node_modules/bootstrap')<br><br>import { fileURLToPath, URL } from 'node:url'<br><br>import { defineConfig } from 'vite'<br>import vue from '@vitejs/plugin-vue'<br><br>const path = require('path')<br><br>// https://vitejs.dev/config/<br>export default defineConfig({<br>  plugins: [vue()],<br>  resolve: {<br>    alias: {<br>      '@': fileURLToPath(new URL('./src', import.meta.url)),<br>      '~bootstrap': path.resolve(__dirname, 'node_modules/bootstrap')<br>    }<br>  }<br>})</pre>\n<p>Finally, add the Bootstrap JS components to your Vue project entrypoint (ie: src/main.js):</p>\n<pre>import \"bootstrap\"<br><br>// So your total Bootstrap import statement will be:<br>import \"bootstrap/dist/css/bootstrap.min.css\"<br>import \"./assets/scss/styles.scss\"<br>import \"bootstrap\"</pre>\n<p><em>*Great stackoverflow post </em><a href=\"https://stackoverflow.com/questions/65547199/using-bootstrap-5-with-vue-3\"><strong><em>here</em></strong></a><em> on Bootstrap 5 installation and usage tips.<br>**Check the Bootstrap Vite docs\u00a0</em><a href=\"https://getbootstrap.com/docs/5.2/getting-started/vite/\"><strong><em>here</em></strong></a><em>.</em></p>\n<h3>Conclusion</h3>\n<p>And that\u2019s it! The Vite experience in my opinion is pretty awesome: it\u2019s fast, easy, and the lightning dev server that everyone\u2019s talking about is worth it alone. Hopefully this short guide gets you set up quickly so you can start building.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=30647b82c271\" width=\"1\" height=\"1\" alt=\"\">\n",
            "content": "\n<h3>How to Set up a Vue app with Vite, SASS, Vue Router, Bootstrap, and other\u00a0goodies.</h3>\n<p>I\u2019ve been getting up to speed on Vue 3 and Vite. There are a lot of differences from Vue 2 and the Vue CLI\u200a\u2014\u200aeven just spooling up a new project\u00a0. This article runs through a super simple setup to get you going with all the core\u00a0stuff.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rZj9WU3-xba9Is1d\"><figcaption>Photo by <a href=\"https://unsplash.com/@seemoris?utm_source=medium&amp;utm_medium=referral\">Caleb George</a> on\u00a0<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><blockquote>\n<em>*This article assumes you have node and npm installed on your machine. If not download/install the </em><a href=\"https://nodejs.org/en/download/\"><em>LTS version of node</em></a><em>, and the latest version of\u00a0</em><a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\"><em>npm</em></a><em>.</em>\n</blockquote>\n<h3>Here we\u00a0go</h3>\n<p>Start by installing Vite\u200a\u2014\u200arun this in your terminal:</p>\n<p>npm init vite@latest</p>\n<p>This will prompt you with a bunch of choices for your\u00a0setup:</p>\n<p>\u2714 Project name:\u00a0\u2026 your-super-duper-vite-app-name</p>\n<p>Framework of\u00a0choice:</p>\n<pre>? Select a framework: \u203a \u2014 Use arrow-keys. Return to submit. <br>  Vanilla<br>\u276f Vue<br>  React<br>  Preact<br>  Lit<br>  Svelte</pre>\n<p>Select a variant. For the best customizing experience, select Customize with create-vue:</p>\n<pre>? Select a variant: \u203a \u2014 Use arrow-keys. Return to submit.<br> JavaScript<br> TypeScript<br>\u276f Customize with create-vue<br> Nuxt</pre>\n<p>The selections below are my preferences, but you can choose what works for\u00a0you:</p>\n<pre>\u2714 Select a variant: \u203a Customize with create-vue<br>Vue.js - The Progressive JavaScript Framework</pre>\n<pre>\u2714 Add TypeScript? \u2026 <strong>No</strong> / Yes<br>\u2714 Add JSX Support? \u2026 <strong>No</strong> / Yes<br>\u2714 Add Vue Router for Single Page Application development? \u2026 No / <strong>Yes</strong><br>\u2714 Add Pinia for state management? \u2026 No / <strong>Yes</strong><br>\u2714 Add Vitest for Unit Testing? \u2026 No / <strong>Yes</strong><br>\u2714 Add Cypress for End-to-End testing? \u2026 No / <strong>Yes</strong><br>\u2714 Add ESLint for code quality? \u2026 No / <strong>Yes</strong><br>\u2714 Add Prettier for code formatting? \u2026 No / <strong>Yes</strong></pre>\n<p><a href=\"https://pinia.vuejs.org/\"><strong>Pinia</strong></a> has replaced <a href=\"https://vuex.vuejs.org/\">Vuex</a> as the official state management library for Vue. It works with Vue 2 and 3, and both the options and composition APIs.</p>\n<p>cd into the project folder, install npm, and run your dev\u00a0server:</p>\n<pre>Done. Now run:</pre>\n<pre>cd vite-app<br>npm install<br>npm run dev</pre>\n<h3>SASS</h3>\n<p>For SASS, LESS, or stylus support, you have to install node-sass manually (I use SASS\u200a\u2014\u200asee below for Bootstrap specific notes on installing SASS):</p>\n<pre># .scss and .sass <br><strong>npm add -D sass</strong></pre>\n<pre># .less <br>npm add -D less</pre>\n<pre># .styl and .stylus <br>npm add -D stylus</pre>\n<p><em>Check </em><a href=\"https://vitejs.dev/guide/features.html#css-pre-processors\"><strong><em>here</em></strong></a><em> for Vite docs on CSS preprocessors.</em></p>\n<h3>Bootstrap 5</h3>\n<p>With the latest version 5 of Bootstrap, there is no jQuery so it can be used directly in a Vue project without the need for a wrapper or other library like BootstrapVue (which is admittedly awesome). I like this for the ability to use the latest Bootstrap classes and components, and for keeping your stack current (as of this writing BootstrapVue uses Bootstrap version\u00a04*).</p>\n<p>To install (from the Bootstrap docs under\u00a0<a href=\"https://getbootstrap.com/docs/5.2/getting-started/vite/\">Vite</a>):</p>\n<pre>npm i --save bootstrap @popperjs/core</pre>\n<p>Then <strong>Install additional SASS dependency.</strong> We need another dependency (Sass) to properly import and bundle Bootstrap\u2019s CSS:</p>\n<pre>npm i --save-dev sass</pre>\n<p><strong>Now create an SCSS folder and add a </strong>styles.scss<strong> file inside it to import Bootstrap\u2019s CSS.</strong> The complete path will\u00a0be:</p>\n<pre>./assets/scss/styles.scss</pre>\n<p>Then in styles.scss, import all of Bootstrap\u2019s CSS/SASS files\u00a0with:</p>\n<pre>@import \"~bootstrap/scss/bootstrap\";</pre>\n<p>And import this into your project by going into your main.js file and\u00a0adding:</p>\n<pre>import \"bootstrap/dist/css/bootstrap.min.css\"<br>import \"./assets/scss/styles.scss\"</pre>\n<p><strong><em>*An important note that I missed the first time around with this setup: </em></strong><em>you have to add a few lines in </em>vite.config.js<em> to set up Bootstrap\u2019s SASS import for Vite to find your Bootstrap\u2019s SASS files in </em>node_modules<em>:</em></p>\n<pre>// Add this to your vite.config.js:<br>// const path = require('path')<br>// '~bootstrap': path.resolve(__dirname, 'node_modules/bootstrap')<br><br>import { fileURLToPath, URL } from 'node:url'<br><br>import { defineConfig } from 'vite'<br>import vue from '@vitejs/plugin-vue'<br><br>const path = require('path')<br><br>// https://vitejs.dev/config/<br>export default defineConfig({<br>  plugins: [vue()],<br>  resolve: {<br>    alias: {<br>      '@': fileURLToPath(new URL('./src', import.meta.url)),<br>      '~bootstrap': path.resolve(__dirname, 'node_modules/bootstrap')<br>    }<br>  }<br>})</pre>\n<p>Finally, add the Bootstrap JS components to your Vue project entrypoint (ie: src/main.js):</p>\n<pre>import \"bootstrap\"<br><br>// So your total Bootstrap import statement will be:<br>import \"bootstrap/dist/css/bootstrap.min.css\"<br>import \"./assets/scss/styles.scss\"<br>import \"bootstrap\"</pre>\n<p><em>*Great stackoverflow post </em><a href=\"https://stackoverflow.com/questions/65547199/using-bootstrap-5-with-vue-3\"><strong><em>here</em></strong></a><em> on Bootstrap 5 installation and usage tips.<br>**Check the Bootstrap Vite docs\u00a0</em><a href=\"https://getbootstrap.com/docs/5.2/getting-started/vite/\"><strong><em>here</em></strong></a><em>.</em></p>\n<h3>Conclusion</h3>\n<p>And that\u2019s it! The Vite experience in my opinion is pretty awesome: it\u2019s fast, easy, and the lightning dev server that everyone\u2019s talking about is worth it alone. Hopefully this short guide gets you set up quickly so you can start building.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=30647b82c271\" width=\"1\" height=\"1\" alt=\"\">\n",
            "enclosure": {},
            "categories": [
                "vue",
                "vue-router",
                "vitejs",
                "sass",
                "setup-guide"
            ]
        }
    ]
}